# pages\login\login.component.html
<div class="header bg-gradient-danger py-7 py-lg-8">
  <div class="container">
    <div class="header-body text-center mb-7">
      <div class="row justify-content-center">
        <div class="col-lg-5 col-md-6">
          <h1 class="text-white">¡Bienvenido!</h1>
          <p class="text-lead text-light">Inicia sesión con tu cuenta de Google para acceder a tu perfil.</p>
        </div>
      </div>
    </div>
  </div>
  <div class="separator separator-bottom separator-skew zindex-100">
    <svg x="0" y="0" viewBox="0 0 2560 100" preserveAspectRatio="none" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <polygon class="fill-default" points="2560 0 2560 100 0 100"></polygon>
    </svg>
  </div>
</div>
<!-- Page content -->
<div class="container mt--8 pb-5">
  <div class="row justify-content-center">
    <div class="col-lg-5 col-md-7">
      <div class="card bg-secondary shadow border-0">
        <div class="card-header bg-transparent pb-5">
          <div class="text-muted text-center mt-2 mb-3"><small>Iniciar sesión con</small></div>
          <div class="btn-wrapper text-center">
            <!-- El componente del botón de Google se renderiza aquí -->
            <app-login-button></app-login-button>
          </div>
        </div>
        <!-- Se elimina el resto del card-body que contenía el formulario de credenciales -->
      </div>
      <div class="row mt-3">
        <div class="col-6">
          <a href="javascript:void(0)" class="text-light"><small>¿Olvidaste tu contraseña?</small></a>
        </div>
        <div class="col-6 text-right">
          <a [routerLink]="['/register']" class="text-light"><small>Crear nueva cuenta</small></a>
        </div>
      </div>
    </div>
  </div>
</div>


# pages\theaters\list\list.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ListComponent } from './list.component';

describe('ListComponent', () => {
  let component: ListComponent;
  let fixture: ComponentFixture<ListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ListComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\icons\icons.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-icons',
  templateUrl: './icons.component.html',
  styleUrls: ['./icons.component.scss']
})
export class IconsComponent implements OnInit {

  public copy: string;
  constructor() { }

  ngOnInit() {
  }
}


# pages\icons\icons.component.scss


# models\role-permission.model.spec.ts
import { RolePermission } from './role-permission.model';

describe('RolePermission', () => {
  it('should create an instance', () => {
    expect(new RolePermission()).toBeTruthy();
  });
});


# pages\icons\icons.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { IconsComponent } from './icons.component';

describe('IconsComponent', () => {
  let component: IconsComponent;
  let fixture: ComponentFixture<IconsComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ IconsComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(IconsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\theaters\list\list.component.scss


# models\projector.model.ts
export class Projector {
}


# models\address.model.spec.ts
import { Address } from './address.model';

describe('Address', () => {
  it('should create an instance', () => {
    expect(new Address()).toBeTruthy();
  });
});


# models\password.model.spec.ts
import { Password } from './password.model';

describe('Password', () => {
  it('should create an instance', () => {
    expect(new Password()).toBeTruthy();
  });
});


# components\navbar\navbar.component.ts
import { Component, OnInit, ElementRef } from '@angular/core';
import { ROUTES } from '../sidebar/sidebar.component';
import { Location, LocationStrategy, PathLocationStrategy } from '@angular/common';
import { Router } from '@angular/router';
import { SecurityService } from 'src/app/services/security.service';
import { AuthService, GoogleUser } from 'src/app/services/auth.service'; // Importar AuthService y GoogleUser
import { Observable } from 'rxjs'; // Importar Observable

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.scss'],
})
export class NavbarComponent implements OnInit {
  public focus: boolean;
  public listTitles: any[];
  public location: Location;
  public user$: Observable<GoogleUser | null>; // Observable para los datos del usuario

  constructor(
    location: Location,
    private element: ElementRef,
    private router: Router,
    private securityService: SecurityService, // Mantener si aún se usa en alguna parte para existSession()
    private authService: AuthService // Inyectar AuthService
  ) {
    this.location = location;
  }

  ngOnInit() {
    this.listTitles = ROUTES.filter((listTitle) => listTitle);
    // Suscribirse al observable de usuario del AuthService
    this.user$ = this.authService.user$;
  }

  getTitle() {
    let titlee = this.location.prepareExternalUrl(this.location.path());
    if (titlee.charAt(0) === '#') {
      titlee = titlee.slice(1);
    }

    for (let item = 0; item < this.listTitles.length; item++) {
      if (this.listTitles[item].path === titlee) {
        return this.listTitles[item].title;
      }
    }
    return 'Dashboard';
  }

  // Método para cerrar sesión, llamando al servicio de autenticación
  logout(): void {
    console.log('Cerrando sesión desde Navbar');
    this.authService.signOut();
  }
}


# pages\theaters\list\list.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8"></div>
<!-- Page content -->
<div class="container-fluid mt--7">
    <!-- Table -->
    <div class="row">
        <div class="col">
            <div class="card shadow">
                <div class="card-header bg-transparent">
                    <h3 class="mb-0">Theaters</h3>
                    <button class="btn btn-info" (click)="create()">Create</button>
                </div>
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <td>Id</td>
                            <td>Ubicación</td>
                            <td>Capacidad</td>
                            <td>Opciones</td>
                        </thead>
                        <tbody>
                            <tr *ngFor="let theater of theaters">
                                <td>{{ theater.id }}</td>
                                <td>{{ theater.location }}</td>
                                <td>{{ theater.capacity }}</td>
                                <td>
                                    <button class="btn btn-success" (click)="view(theater.id)">View</button>
                                    <button class="btn btn-primary" (click)="edit(theater.id)">Editar</button>
                                    <button class="btn btn-danger" (click)="delete(theater.id)">Eliminar</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


# app.component.scss


# components\navbar\navbar.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { NavbarComponent } from './navbar.component';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ NavbarComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\projector.model.spec.ts
import { Projector } from './projector.model';

describe('Projector', () => {
  it('should create an instance', () => {
    expect(new Projector()).toBeTruthy();
  });
});


# models\address.model.ts
import { User } from './user.model';

export class Address {
  user?: User;
  id?: number;
  street?: string;
  number?: string;
  latitude?: number;
  longitude?: number;
}


# pages\user-profile\user-profile.component.ts
import { Component, OnInit } from '@angular/core';
import { AuthService, GoogleUser } from 'src/app/services/auth.service';
import { Observable } from 'rxjs';
import { Router } from '@angular/router'; // Importar Router

@Component({
  selector: 'app-user-profile',
  templateUrl: './user-profile.component.html',
  styleUrls: ['./user-profile.component.scss'],
})
export class UserProfileComponent implements OnInit {
  public user$: Observable<GoogleUser | null>; // Observable para los datos del usuario

  constructor(private authService: AuthService, private router: Router) {} // Inyectar Router

  ngOnInit() {
    // Suscribirse al observable de usuario del AuthService
    this.user$ = this.authService.user$;
  }

  /**
   * Método para cerrar sesión, llamando al AuthService.
   * La redirección a /login ya está manejada dentro del AuthService.
   */
  logout(): void {
    console.log('Cerrando sesión desde User Profile');
    this.authService.signOut();
  }
}


# pages\dashboard\dashboard.component.ts
import { Component, OnInit } from '@angular/core';
import Chart from 'chart.js';

// core components
import {
  chartOptions,
  parseOptions,
  chartExample1,
  chartExample2
} from "../../variables/charts";

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {

  public datasets: any;
  public data: any;
  public salesChart;
  public clicked: boolean = true;
  public clicked1: boolean = false;

  ngOnInit() {

    this.datasets = [
      [0, 20, 10, 30, 15, 40, 20, 60, 60],
      [0, 20, 5, 25, 10, 30, 15, 40, 40]
    ];
    this.data = this.datasets[0];


    var chartOrders = document.getElementById('chart-orders');

    parseOptions(Chart, chartOptions());


    var ordersChart = new Chart(chartOrders, {
      type: 'bar',
      options: chartExample2.options,
      data: chartExample2.data
    });

    var chartSales = document.getElementById('chart-sales');

    this.salesChart = new Chart(chartSales, {
			type: 'line',
			options: chartExample1.options,
			data: chartExample1.data
		});
  }


  public updateOptions() {
    this.salesChart.data.datasets[0].data = this.data;
    this.salesChart.update();
  }

}


# pages\user-profile\user-profile.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { UserProfileComponent } from './user-profile.component';

describe('UserProfileComponent', () => {
  let component: UserProfileComponent;
  let fixture: ComponentFixture<UserProfileComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ UserProfileComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(UserProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\icons\icons.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8">
  <div class="container-fluid">
    <div class="header-body">
      <!-- Card stats -->
      <div class="row">
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Traffic</h5>
                  <span class="h2 font-weight-bold mb-0">350,897</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-danger text-white rounded-circle shadow">
                    <i class="fas fa-chart-bar"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fa fa-arrow-up"></i> 3.48%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">New users</h5>
                  <span class="h2 font-weight-bold mb-0">2,356</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-warning text-white rounded-circle shadow">
                    <i class="fas fa-chart-pie"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-danger mr-2"><i class="fas fa-arrow-down"></i> 3.48%</span>
                <span class="text-nowrap">Since last week</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Sales</h5>
                  <span class="h2 font-weight-bold mb-0">924</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-yellow text-white rounded-circle shadow">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-warning mr-2"><i class="fas fa-arrow-down"></i> 1.10%</span>
                <span class="text-nowrap">Since yesterday</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Performance</h5>
                  <span class="h2 font-weight-bold mb-0">49,65%</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-info text-white rounded-circle shadow">
                    <i class="fas fa-percent"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fas fa-arrow-up"></i> 12%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Page content -->
<div class="container-fluid mt--7">
  <!-- Table -->
  <div class="row">
    <div class="col">
      <div class="card shadow">
        <div class="card-header bg-transparent">
          <h3 class="mb-0">Icons</h3>
        </div>
        <div class="card-body">
          <div class="row icon-examples">
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'active-40' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'active-40'" (cbOnSuccess) = "copy = 'active-40'">
                <div>
                  <i class="ni ni-active-40"></i>
                  <span>active-40</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'air-baloon' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'air-baloon'" (cbOnSuccess) = "copy = 'air-baloon'">
                <div>
                  <i class="ni ni-air-baloon"></i>
                  <span>air-baloon</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'album-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'album-2'" (cbOnSuccess) = "copy = 'album-2'">
                <div>
                  <i class="ni ni-album-2"></i>
                  <span>album-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'align-center' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'align-center'" (cbOnSuccess) = "copy = 'align-center'">
                <div>
                  <i class="ni ni-align-center"></i>
                  <span>align-center</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'align-left-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'align-left-2'" (cbOnSuccess) = "copy = 'align-left-2'">
                <div>
                  <i class="ni ni-align-left-2"></i>
                  <span>align-left-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'ambulance' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'ambulance'" (cbOnSuccess) = "copy = 'ambulance'">
                <div>
                  <i class="ni ni-ambulance"></i>
                  <span>ambulance</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'app' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'app'" (cbOnSuccess) = "copy = 'app'">
                <div>
                  <i class="ni ni-app"></i>
                  <span>app</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'archive-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'archive-2'" (cbOnSuccess) = "copy = 'archive-2'">
                <div>
                  <i class="ni ni-archive-2"></i>
                  <span>archive-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'atom' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'atom'" (cbOnSuccess) = "copy = 'atom'">
                <div>
                  <i class="ni ni-atom"></i>
                  <span>atom</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'badge' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'badge'" (cbOnSuccess) = "copy = 'badge'">
                <div>
                  <i class="ni ni-badge"></i>
                  <span>badge</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bag-17' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bag-17'" (cbOnSuccess) = "copy = 'bag-17'">
                <div>
                  <i class="ni ni-bag-17"></i>
                  <span>bag-17</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'basket' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'basket'" (cbOnSuccess) = "copy = 'basket'">
                <div>
                  <i class="ni ni-basket"></i>
                  <span>basket</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bell-55' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bell-55'" (cbOnSuccess) = "copy = 'bell-55'">
                <div>
                  <i class="ni ni-bell-55"></i>
                  <span>bell-55</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bold-down' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bold-down'" (cbOnSuccess) = "copy = 'bold-down'">
                <div>
                  <i class="ni ni-bold-down"></i>
                  <span>bold-down</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bold-left' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bold-left'" (cbOnSuccess) = "copy = 'bold-left'">
                <div>
                  <i class="ni ni-bold-left"></i>
                  <span>bold-left</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bold-right' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bold-right'" (cbOnSuccess) = "copy = 'bold-right'">
                <div>
                  <i class="ni ni-bold-right"></i>
                  <span>bold-right</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bold-up' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bold-up'" (cbOnSuccess) = "copy = 'bold-up'">
                <div>
                  <i class="ni ni-bold-up"></i>
                  <span>bold-up</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bold' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bold'" (cbOnSuccess) = "copy = 'bold'">
                <div>
                  <i class="ni ni-bold"></i>
                  <span>bold</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'book-bookmark' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'book-bookmark'" (cbOnSuccess) = "copy = 'book-bookmark'">
                <div>
                  <i class="ni ni-book-bookmark"></i>
                  <span>book-bookmark</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'books' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'books'" (cbOnSuccess) = "copy = 'books'">
                <div>
                  <i class="ni ni-books"></i>
                  <span>books</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'box-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'box-2'" (cbOnSuccess) = "copy = 'box-2'">
                <div>
                  <i class="ni ni-box-2"></i>
                  <span>box-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'briefcase-24' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'briefcase-24'" (cbOnSuccess) = "copy = 'briefcase-24'">
                <div>
                  <i class="ni ni-briefcase-24"></i>
                  <span>briefcase-24</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'building' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'building'" (cbOnSuccess) = "copy = 'building'">
                <div>
                  <i class="ni ni-building"></i>
                  <span>building</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bulb-61' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bulb-61'" (cbOnSuccess) = "copy = 'bulb-61'">
                <div>
                  <i class="ni ni-bulb-61"></i>
                  <span>bulb-61</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bullet-list-67' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bullet-list-67'" (cbOnSuccess) = "copy = 'bullet-list-67'">
                <div>
                  <i class="ni ni-bullet-list-67"></i>
                  <span>bullet-list-67</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'bus-front-12' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'bus-front-12'" (cbOnSuccess) = "copy = 'bus-front-12'">
                <div>
                  <i class="ni ni-bus-front-12"></i>
                  <span>bus-front-12</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'button-pause' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'button-pause'" (cbOnSuccess) = "copy = 'button-pause'">
                <div>
                  <i class="ni ni-button-pause"></i>
                  <span>button-pause</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'button-play' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'button-play'" (cbOnSuccess) = "copy = 'button-play'">
                <div>
                  <i class="ni ni-button-play"></i>
                  <span>button-play</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'button-power' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'button-power'" (cbOnSuccess) = "copy = 'button-power'">
                <div>
                  <i class="ni ni-button-power"></i>
                  <span>button-power</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'calendar-grid-58' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'calendar-grid-58'" (cbOnSuccess) = "copy = 'calendar-grid-58'">
                <div>
                  <i class="ni ni-calendar-grid-58"></i>
                  <span>calendar-grid-58</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'camera-compact' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'camera-compact'" (cbOnSuccess) = "copy = 'camera-compact'">
                <div>
                  <i class="ni ni-camera-compact"></i>
                  <span>camera-compact</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'caps-small' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'caps-small'" (cbOnSuccess) = "copy = 'caps-small'">
                <div>
                  <i class="ni ni-caps-small"></i>
                  <span>caps-small</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'cart' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'cart'" (cbOnSuccess) = "copy = 'cart'">
                <div>
                  <i class="ni ni-cart"></i>
                  <span>cart</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'chart-bar-32' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'chart-bar-32'" (cbOnSuccess) = "copy = 'chart-bar-32'">
                <div>
                  <i class="ni ni-chart-bar-32"></i>
                  <span>chart-bar-32</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'chart-pie-35' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'chart-pie-35'" (cbOnSuccess) = "copy = 'chart-pie-35'">
                <div>
                  <i class="ni ni-chart-pie-35"></i>
                  <span>chart-pie-35</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'chat-round' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'chat-round'" (cbOnSuccess) = "copy = 'chat-round'">
                <div>
                  <i class="ni ni-chat-round"></i>
                  <span>chat-round</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'check-bold' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'check-bold'" (cbOnSuccess) = "copy = 'check-bold'">
                <div>
                  <i class="ni ni-check-bold"></i>
                  <span>check-bold</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'circle-08' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'circle-08'" (cbOnSuccess) = "copy = 'circle-08'">
                <div>
                  <i class="ni ni-circle-08"></i>
                  <span>circle-08</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'cloud-download-95' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'cloud-download-95'" (cbOnSuccess) = "copy = 'cloud-download-95'">
                <div>
                  <i class="ni ni-cloud-download-95"></i>
                  <span>cloud-download-95</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'cloud-upload-96' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'cloud-upload-96'" (cbOnSuccess) = "copy = 'cloud-upload-96'">
                <div>
                  <i class="ni ni-cloud-upload-96"></i>
                  <span>cloud-upload-96</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'compass-04' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'compass-04'" (cbOnSuccess) = "copy = 'compass-04'">
                <div>
                  <i class="ni ni-compass-04"></i>
                  <span>compass-04</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'controller' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'controller'" (cbOnSuccess) = "copy = 'controller'">
                <div>
                  <i class="ni ni-controller"></i>
                  <span>controller</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'credit-card' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'credit-card'" (cbOnSuccess) = "copy = 'credit-card'">
                <div>
                  <i class="ni ni-credit-card"></i>
                  <span>credit-card</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'curved-next' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'curved-next'" (cbOnSuccess) = "copy = 'curved-next'">
                <div>
                  <i class="ni ni-curved-next"></i>
                  <span>curved-next</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'delivery-fast' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'delivery-fast'" (cbOnSuccess) = "copy = 'delivery-fast'">
                <div>
                  <i class="ni ni-delivery-fast"></i>
                  <span>delivery-fast</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'diamond' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'diamond'" (cbOnSuccess) = "copy = 'diamond'">
                <div>
                  <i class="ni ni-diamond"></i>
                  <span>diamond</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'email-83' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'email-83'" (cbOnSuccess) = "copy = 'email-83'">
                <div>
                  <i class="ni ni-email-83"></i>
                  <span>email-83</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'fat-add' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'fat-add'" (cbOnSuccess) = "copy = 'fat-add'">
                <div>
                  <i class="ni ni-fat-add"></i>
                  <span>fat-add</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'fat-delete' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'fat-delete'" (cbOnSuccess) = "copy = 'fat-delete'">
                <div>
                  <i class="ni ni-fat-delete"></i>
                  <span>fat-delete</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'fat-remove' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'fat-remove'" (cbOnSuccess) = "copy = 'fat-remove'">
                <div>
                  <i class="ni ni-fat-remove"></i>
                  <span>fat-remove</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'favourite-28' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'favourite-28'" (cbOnSuccess) = "copy = 'favourite-28'">
                <div>
                  <i class="ni ni-favourite-28"></i>
                  <span>favourite-28</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'folder-17' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'folder-17'" (cbOnSuccess) = "copy = 'folder-17'">
                <div>
                  <i class="ni ni-folder-17"></i>
                  <span>folder-17</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'glasses-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'glasses-2'" (cbOnSuccess) = "copy = 'glasses-2'">
                <div>
                  <i class="ni ni-glasses-2"></i>
                  <span>glasses-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'hat-3' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'hat-3'" (cbOnSuccess) = "copy = 'hat-3'">
                <div>
                  <i class="ni ni-hat-3"></i>
                  <span>hat-3</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'headphones' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'headphones'" (cbOnSuccess) = "copy = 'headphones'">
                <div>
                  <i class="ni ni-headphones"></i>
                  <span>headphones</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'html5' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'html5'" (cbOnSuccess) = "copy = 'html5'">
                <div>
                  <i class="ni ni-html5"></i>
                  <span>html5</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'istanbul' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'istanbul'" (cbOnSuccess) = "copy = 'istanbul'">
                <div>
                  <i class="ni ni-istanbul"></i>
                  <span>istanbul</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'circle-08' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'circle-08'" (cbOnSuccess) = "copy = 'circle-08'">
                <div>
                  <i class="ni ni-circle-08"></i>
                  <span>circle-08</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'key-25' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'key-25'" (cbOnSuccess) = "copy = 'key-25'">
                <div>
                  <i class="ni ni-key-25"></i>
                  <span>key-25</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'laptop' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'laptop'" (cbOnSuccess) = "copy = 'laptop'">
                <div>
                  <i class="ni ni-laptop"></i>
                  <span>laptop</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'like-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'like-2'" (cbOnSuccess) = "copy = 'like-2'">
                <div>
                  <i class="ni ni-like-2"></i>
                  <span>like-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'lock-circle-open' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'lock-circle-open'" (cbOnSuccess) = "copy = 'lock-circle-open'">
                <div>
                  <i class="ni ni-lock-circle-open"></i>
                  <span>lock-circle-open</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'map-big' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'map-big'" (cbOnSuccess) = "copy = 'map-big'">
                <div>
                  <i class="ni ni-map-big"></i>
                  <span>map-big</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'mobile-button' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'mobile-button'" (cbOnSuccess) = "copy = 'mobile-button'">
                <div>
                  <i class="ni ni-mobile-button"></i>
                  <span>mobile-button</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'money-coins' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'money-coins'" (cbOnSuccess) = "copy = 'money-coins'">
                <div>
                  <i class="ni ni-money-coins"></i>
                  <span>money-coins</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'note-03' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'note-03'" (cbOnSuccess) = "copy = 'note-03'">
                <div>
                  <i class="ni ni-note-03"></i>
                  <span>note-03</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'notification-70' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'notification-70'" (cbOnSuccess) = "copy = 'notification-70'">
                <div>
                  <i class="ni ni-notification-70"></i>
                  <span>notification-70</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'palette' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'palette'" (cbOnSuccess) = "copy = 'palette'">
                <div>
                  <i class="ni ni-palette"></i>
                  <span>palette</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'paper-diploma' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'paper-diploma'" (cbOnSuccess) = "copy = 'paper-diploma'">
                <div>
                  <i class="ni ni-paper-diploma"></i>
                  <span>paper-diploma</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'pin-3' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'pin-3'" (cbOnSuccess) = "copy = 'pin-3'">
                <div>
                  <i class="ni ni-pin-3"></i>
                  <span>pin-3</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'planet' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'planet'" (cbOnSuccess) = "copy = 'planet'">
                <div>
                  <i class="ni ni-planet"></i>
                  <span>planet</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'ruler-pencil' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'ruler-pencil'" (cbOnSuccess) = "copy = 'ruler-pencil'">
                <div>
                  <i class="ni ni-ruler-pencil"></i>
                  <span>ruler-pencil</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'satisfied' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'satisfied'" (cbOnSuccess) = "copy = 'satisfied'">
                <div>
                  <i class="ni ni-satisfied"></i>
                  <span>satisfied</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'scissors' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'scissors'" (cbOnSuccess) = "copy = 'scissors'">
                <div>
                  <i class="ni ni-scissors"></i>
                  <span>scissors</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'send' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'send'" (cbOnSuccess) = "copy = 'send'">
                <div>
                  <i class="ni ni-send"></i>
                  <span>send</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'settings-gear-65' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'settings-gear-65'" (cbOnSuccess) = "copy = 'settings-gear-65'">
                <div>
                  <i class="ni ni-settings-gear-65"></i>
                  <span>settings-gear-65</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'settings' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'settings'" (cbOnSuccess) = "copy = 'settings'">
                <div>
                  <i class="ni ni-settings"></i>
                  <span>settings</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'single-02' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'single-02'" (cbOnSuccess) = "copy = 'single-02'">
                <div>
                  <i class="ni ni-single-02"></i>
                  <span>single-02</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'single-copy-04' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'single-copy-04'" (cbOnSuccess) = "copy = 'single-copy-04'">
                <div>
                  <i class="ni ni-single-copy-04"></i>
                  <span>single-copy-04</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'sound-wave' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'sound-wave'" (cbOnSuccess) = "copy = 'sound-wave'">
                <div>
                  <i class="ni ni-sound-wave"></i>
                  <span>sound-wave</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'spaceship' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'spaceship'" (cbOnSuccess) = "copy = 'spaceship'">
                <div>
                  <i class="ni ni-spaceship"></i>
                  <span>spaceship</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'square-pin' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'square-pin'" (cbOnSuccess) = "copy = 'square-pin'">
                <div>
                  <i class="ni ni-square-pin"></i>
                  <span>square-pin</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'support-16' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'support-16'" (cbOnSuccess) = "copy = 'support-16'">
                <div>
                  <i class="ni ni-support-16"></i>
                  <span>support-16</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'tablet-button' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'tablet-button'" (cbOnSuccess) = "copy = 'tablet-button'">
                <div>
                  <i class="ni ni-tablet-button"></i>
                  <span>tablet-button</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'tag' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'tag'" (cbOnSuccess) = "copy = 'tag'">
                <div>
                  <i class="ni ni-tag"></i>
                  <span>tag</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'tie-bow' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'tie-bow'" (cbOnSuccess) = "copy = 'tie-bow'">
                <div>
                  <i class="ni ni-tie-bow"></i>
                  <span>tie-bow</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'time-alarm' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'time-alarm'" (cbOnSuccess) = "copy = 'time-alarm'">
                <div>
                  <i class="ni ni-time-alarm"></i>
                  <span>time-alarm</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'trophy' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'trophy'" (cbOnSuccess) = "copy = 'trophy'">
                <div>
                  <i class="ni ni-trophy"></i>
                  <span>trophy</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'tv-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'tv-2'" (cbOnSuccess) = "copy = 'tv-2'">
                <div>
                  <i class="ni ni-tv-2"></i>
                  <span>tv-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'umbrella-13' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'umbrella-13'" (cbOnSuccess) = "copy = 'umbrella-13'">
                <div>
                  <i class="ni ni-umbrella-13"></i>
                  <span>umbrella-13</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'user-run' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'user-run'" (cbOnSuccess) = "copy = 'user-run'">
                <div>
                  <i class="ni ni-user-run"></i>
                  <span>user-run</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'vector' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'vector'" (cbOnSuccess) = "copy = 'vector'">
                <div>
                  <i class="ni ni-vector"></i>
                  <span>vector</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'watch-time' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'watch-time'" (cbOnSuccess) = "copy = 'watch-time'">
                <div>
                  <i class="ni ni-watch-time"></i>
                  <span>watch-time</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'world' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'world'" (cbOnSuccess) = "copy = 'world'">
                <div>
                  <i class="ni ni-world"></i>
                  <span>world</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'zoom-split-in' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'zoom-split-in'" (cbOnSuccess) = "copy = 'zoom-split-in'">
                <div>
                  <i class="ni ni-zoom-split-in"></i>
                  <span>zoom-split-in</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'collection' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'collection'" (cbOnSuccess) = "copy = 'collection'">
                <div>
                  <i class="ni ni-collection"></i>
                  <span>collection</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'image' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'image'" (cbOnSuccess) = "copy = 'image'">
                <div>
                  <i class="ni ni-image"></i>
                  <span>image</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'shop' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'shop'" (cbOnSuccess) = "copy = 'shop'">
                <div>
                  <i class="ni ni-shop"></i>
                  <span>shop</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'ungroup' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'ungroup'" (cbOnSuccess) = "copy = 'ungroup'">
                <div>
                  <i class="ni ni-ungroup"></i>
                  <span>ungroup</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'world-2' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'world-2'" (cbOnSuccess) = "copy = 'world-2'">
                <div>
                  <i class="ni ni-world-2"></i>
                  <span>world-2</span>
                </div>
              </button>
            </div>
            <div class="col-lg-3 col-md-6">
              <button type="button" placement="top-center" triggers="hover focus click" ngbTooltip="{{copy === 'ui-04' ? 'Copied':'Copy to clipboard'}}"  class="btn-icon-clipboard" ngxClipboard [cbContent]="'ui-04'" (cbOnSuccess) = "copy = 'ui-04'">
                <div>
                  <i class="ni ni-ui-04"></i>
                  <span>ui-04</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


# models\profile.model.spec.ts
import { Profile } from './profile.model';

describe('Profile', () => {
  it('should create an instance', () => {
    expect(new Profile()).toBeTruthy();
  });
});


# pages\user-profile\user-profile.component.scss
/* src/app/pages/user-profile/user-profile.component.scss */

// Estilo para la imagen del perfil cuando es un placeholder (letra)
.card-profile-image .rounded-circle[src*="placehold.co"] {
  background-color: #6c757d; /* Un color gris oscuro para el fondo */
  color: #fff; /* Texto blanco para la letra */
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 4rem; /* Tamaño de fuente grande para la letra */
  font-weight: bold;
  line-height: 1; /* Asegura que el texto esté centrado verticalmente */
  text-align: center;
  border: 3px solid #fff; /* Borde blanco para la imagen de perfil */
}

// Estilo para el placeholder general cuando no hay usuario (el ícono de persona)
.placeholder-avatar {
  background-color: #6c757d; /* Fondo gris para el ícono */
  color: #fff; /* Color blanco para el ícono */
  display: flex;
  align-items: center;
  justify-content: center;
  border: 3px solid #fff; /* Borde blanco */
  font-size: 4rem; /* Tamaño del ícono */
  line-height: 1; /* Centrado vertical */
  // Asegurarse de que el tamaño del span sea el mismo que el img para la consistencia del círculo
  width: 180px; /* Tamaño del avatar grande en el perfil */
  height: 180px;
}

# components\login-button\login-button.component.ts
import { Component, OnInit, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';

@Component({
  selector: 'app-login-button',
  templateUrl: './login-button.component.html',
  styleUrls: ['./login-button.component.scss'],
})
export class LoginButtonComponent implements OnInit {
  constructor(private router: Router, private authService: AuthService, private ngZone: NgZone) {}

  ngOnInit(): void {
    // Renderiza el botón de Google cuando el componente se inicializa
    this.authService.renderGoogleButton('google-signin-button');

    // Escucha el estado de autenticación para redirigir si el login es exitoso
    this.authService.user$.subscribe((user) => {
      if (user) {
        // Usamos NgZone para asegurarnos de que la navegación ocurra dentro de la zona de Angular
        this.ngZone.run(() => {
          this.router.navigate(['user-profile']);
        });
      }
    });
  }
}


# pages\dashboard\dashboard.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardComponent } from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ DashboardComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\permission.model.ts
export class Permission {
  id?: number;
  url?: string;
  method?: string;
}


# components\components.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SidebarComponent } from './sidebar/sidebar.component';
import { NavbarComponent } from './navbar/navbar.component';
import { FooterComponent } from './footer/footer.component';
import { RouterModule } from '@angular/router';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { ProfileComponent } from './profile/profile.component';
import { LoginButtonComponent } from './login-button/login-button.component';

@NgModule({
  imports: [CommonModule, RouterModule, NgbModule],
  declarations: [
    FooterComponent,
    NavbarComponent,
    SidebarComponent,
    ProfileComponent,
    LoginButtonComponent
  ],
  exports: [
    FooterComponent,
    NavbarComponent,
    SidebarComponent,
    ProfileComponent,
    LoginButtonComponent, // Exportado para que otros módulos puedan usarlo
  ],
})
export class ComponentsModule {}


# pages\user-profile\user-profile.component.html
<div class="header pb-8 pt-5 pt-lg-8 d-flex align-items-center" style="min-height: 600px; background-image: url(assets/img/theme/profile-cover.jpg); background-size: cover; background-position: center top">
  <!-- Mask -->
  <span class="mask bg-gradient-default opacity-8"></span>
  <!-- Header container -->
  <div class="container-fluid d-flex align-items-center">
    <div class="row">
      <div class="col-lg-7 col-md-10">
        <h1 class="display-2 text-white">Hola {{ (user$ | async)?.name }}</h1>
        <p class="text-white mt-0 mb-5">Esta es tu página de perfil. Puedes ver y editar tu información personal aquí.</p>
        <a href="javascript:void(0)" class="btn btn-info">Editar perfil</a>
      </div>
    </div>
  </div>
</div>
<div class="container-fluid mt--7">
  <div class="row">
    <div class="col-xl-4 order-xl-2 mb-5 mb-xl-0">
      <div class="card card-profile shadow">
        <div class="row justify-content-center">
          <div class="col-lg-3 order-lg-2">
            <div class="card-profile-image">
              <a href="javascript:void(0)">
                <span *ngIf="user$ | async as user; else noUserImage">
                  <!-- Imagen del usuario con fallback a la primera letra del nombre -->
                  <img [alt]="user.name" [src]="user.picture" class="rounded-circle" onerror="this.onerror=null; this.src='https://placehold.co/180x180/cccccc/333333?text=' + (this.alt ? this.alt.charAt(0).toUpperCase() : 'U');" />
                </span>
                <ng-template #noUserImage>
                  <!-- Placeholder cuando no hay usuario logueado -->
                  <span class="avatar avatar-xxl rounded-circle placeholder-avatar">
                    <i class="ni ni-single-02 text-light" style="font-size: 80px; line-height: 180px"></i>
                  </span>
                </ng-template>
              </a>
            </div>
          </div>
        </div>
        <div class="card-header text-center border-0 pt-8 pt-md-4 pb-0 pb-md-4">
          <div class="d-flex justify-content-between">
            <a href="javascript:void(0)" class="btn btn-sm btn-info mr-4">Conectar</a>
            <a href="javascript:void(0)" class="btn btn-sm btn-default float-right">Mensaje</a>
          </div>
        </div>
        <div class="card-body pt-0 pt-md-4">
          <div class="row">
            <div class="col">
              <div class="card-profile-stats d-flex justify-content-center mt-md-5">
                <div>
                  <span class="heading">22</span>
                  <span class="description">Amigos</span>
                </div>
                <div>
                  <span class="heading">10</span>
                  <span class="description">Fotos</span>
                </div>
                <div>
                  <span class="heading">89</span>
                  <span class="description">Comentarios</span>
                </div>
              </div>
            </div>
          </div>
          <div class="text-center" *ngIf="user$ | async as user">
            <h3>{{ user.name }}<span class="font-weight-light">, 27</span></h3>
            <div class="h5 font-weight-300"><i class="ni location_pin mr-2"></i>Bucharest, Romania</div>
            <div class="h5 mt-4"><i class="ni business_briefcase-24 mr-2"></i>Solution Manager - Creative Tim Officer</div>
            <div><i class="ni education_hat mr-2"></i>University of Computer Science</div>
            <hr class="my-4" />
            <p>Ryan — the name taken by Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs and records all of his own music.</p>
            <a href="javascript:void(0)">Show more</a>
            <!-- Botón de Logout -->
            <div class="mt-4">
              <button class="btn btn-danger" (click)="logout()"><i class="ni ni-user-run mr-2"></i>Cerrar Sesión</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-8 order-xl-1">
      <div class="card bg-secondary shadow">
        <div class="card-header bg-white border-0">
          <div class="row align-items-center">
            <div class="col-8">
              <h3 class="mb-0">Mi cuenta</h3>
            </div>
            <div class="col-4 text-right">
              <a href="javascript:void(0)" class="btn btn-sm btn-primary">Configuración</a>
            </div>
          </div>
        </div>
        <div class="card-body">
          <form>
            <h6 class="heading-small text-muted mb-4">Información del usuario</h6>
            <div class="pl-lg-4">
              <div class="row">
                <div class="col-lg-6">
                  <div class="form-group">
                    <label class="form-control-label" for="input-username">Nombre de usuario</label>
                    <input type="text" id="input-username" class="form-control form-control-alternative" placeholder="Nombre de usuario" value="{{ (user$ | async)?.name }}" />
                  </div>
                </div>
                <div class="col-lg-6">
                  <div class="form-group">
                    <label class="form-control-label" for="input-email">Dirección de correo electrónico</label>
                    <input type="email" id="input-email" class="form-control form-control-alternative" placeholder="{{ (user$ | async)?.email }}" />
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-lg-6">
                  <div class="form-group">
                    <label class="form-control-label" for="input-first-name">Nombre</label>
                    <input type="text" id="input-first-name" class="form-control form-control-alternative" placeholder="Nombre" value="{{ (user$ | async)?.name?.split(' ')[0] }}" />
                  </div>
                </div>
                <div class="col-lg-6">
                  <div class="form-group">
                    <label class="form-control-label" for="input-last-name">Apellido</label>
                    <input type="text" id="input-last-name" class="form-control form-control-alternative" placeholder="Apellido" value="{{ (user$ | async)?.name?.split(' ').slice(1).join(' ') }}" />
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>


# app.module.ts
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms'; // Importa ReactiveFormsModule
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';

import { AppComponent } from './app.component';
import { AdminLayoutComponent } from './layouts/admin-layout/admin-layout.component';
import { AuthLayoutComponent } from './layouts/auth-layout/auth-layout.component';

import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

import { AppRoutingModule } from './app.routing';
import { ComponentsModule } from './components/components.module';

// Importaciones para las nuevas clases
import { UserService } from './services/user.service'; // Servicio de Usuario
import { UsersComponent } from './pages/user/user.component'; // Componente de Usuarios

@NgModule({
  imports: [
    BrowserAnimationsModule,
    FormsModule,
    HttpClientModule,
    ComponentsModule,
    NgbModule,
    RouterModule,
    AppRoutingModule,
    ReactiveFormsModule, // Asegúrate de que ReactiveFormsModule esté importado aquí
  ],
  declarations: [
    AppComponent,
    AdminLayoutComponent,
    AuthLayoutComponent,
    UsersComponent, // Declara el nuevo componente de usuarios
  ],
  providers: [
    UserService, // Provee el UserService aquí
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}


# components\login-button\login-button.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginButtonComponent } from './login-button.component';

describe('LoginButtonComponent', () => {
  let component: LoginButtonComponent;
  let fixture: ComponentFixture<LoginButtonComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ LoginButtonComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginButtonComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\dashboard\dashboard.component.scss


# pages\user\user.component.ts
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../services/user.service';
import { User } from '../../models/user.model';
import Swal from 'sweetalert2'; // Importa SweetAlert2

@Component({
  selector: 'app-users',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UsersComponent implements OnInit {
  users: User[] = [];
  selectedUser: User | null = null;
  newUser: User = { name: '', email: '', password: '' };
  isEditMode: boolean = false;

  constructor(private userService: UserService) { }

  ngOnInit(): void {
    this.loadUsers();
  }

  /**
   * Carga la lista de usuarios desde el servicio.
   */
  loadUsers(): void {
    this.userService.getUsers().subscribe(
      (data) => {
        this.users = data;
      },
      (error) => {
        Swal.fire('Error', 'No se pudieron cargar los usuarios: ' + error.message, 'error');
      }
    );
  }

  /**
   * Muestra el formulario para crear un nuevo usuario.
   */
  openCreateForm(): void {
    this.selectedUser = null;
    this.newUser = { name: '', email: '', password: '' };
    this.isEditMode = false;
    // Aquí puedes abrir un modal o mostrar un formulario en la misma página
    // Swal.fire para un formulario básico si no tienes modal
    Swal.fire({
      title: 'Crear Nuevo Usuario',
      html:
        '<input id="swal-input1" class="swal2-input" placeholder="Nombre">' +
        '<input id="swal-input2" class="swal2-input" placeholder="Email">' +
        '<input id="swal-input3" class="swal2-input" placeholder="Contraseña" type="password">',
      focusConfirm: false,
      preConfirm: () => {
        const name = (document.getElementById('swal-input1') as HTMLInputElement).value;
        const email = (document.getElementById('swal-input2') as HTMLInputElement).value;
        const password = (document.getElementById('swal-input3') as HTMLInputElement).value;
        if (!name || !email || !password) {
          Swal.showValidationMessage('Todos los campos son obligatorios');
          return false;
        }
        this.newUser = { name, email, password };
        return true;
      }
    }).then((result) => {
      if (result.isConfirmed) {
        this.createUser();
      }
    });
  }

  /**
   * Crea un nuevo usuario utilizando los datos de `newUser`.
   */
  createUser(): void {
    this.userService.createUser(this.newUser).subscribe(
      (user) => {
        Swal.fire('¡Éxito!', 'Usuario creado correctamente.', 'success');
        this.loadUsers(); // Recarga la lista de usuarios
        this.newUser = { name: '', email: '', password: '' }; // Limpia el formulario
      },
      (error) => {
        Swal.fire('Error', 'No se pudo crear el usuario: ' + error.message, 'error');
      }
    );
  }

  /**
   * Muestra el formulario para editar un usuario existente.
   * @param user El usuario a editar.
   */
  editUser(user: User): void {
    this.selectedUser = { ...user }; // Crea una copia para evitar modificar el original directamente
    this.newUser = { ...user }; // Carga los datos en el formulario de edición
    this.isEditMode = true;

    Swal.fire({
      title: 'Editar Usuario',
      html:
        `<input id="swal-input1" class="swal2-input" value="${user.name}" placeholder="Nombre">` +
        `<input id="swal-input2" class="swal2-input" value="${user.email}" placeholder="Email">` +
        // No pre-llenar la contraseña por seguridad
        '<input id="swal-input3" class="swal2-input" placeholder="Nueva Contraseña (opcional)" type="password">',
      focusConfirm: false,
      preConfirm: () => {
        const name = (document.getElementById('swal-input1') as HTMLInputElement).value;
        const email = (document.getElementById('swal-input2') as HTMLInputElement).value;
        const password = (document.getElementById('swal-input3') as HTMLInputElement).value;

        if (!name || !email) {
          Swal.showValidationMessage('El nombre y el email son obligatorios');
          return false;
        }

        this.selectedUser!.name = name;
        this.selectedUser!.email = email;
        if (password) {
          this.selectedUser!.password = password;
        } else {
          // Si no se proporciona una nueva contraseña, eliminarla del objeto para no enviarla si no es necesario
          delete this.selectedUser!.password;
        }
        return true;
      }
    }).then((result) => {
      if (result.isConfirmed && this.selectedUser) {
        this.updateUser(this.selectedUser);
      }
    });
  }

  /**
   * Actualiza un usuario.
   * @param user El usuario a actualizar.
   */
  updateUser(user: User): void {
    if (user.id === undefined) {
      Swal.fire('Error', 'El ID del usuario es indefinido, no se puede actualizar.', 'error');
      return;
    }

    this.userService.updateUser(user).subscribe(
      (updatedUser) => {
        Swal.fire('¡Éxito!', 'Usuario actualizado correctamente.', 'success');
        this.loadUsers(); // Recarga la lista de usuarios
        this.selectedUser = null; // Limpia la selección
        this.isEditMode = false;
      },
      (error) => {
        Swal.fire('Error', 'No se pudo actualizar el usuario: ' + error.message, 'error');
      }
    );
  }

  /**
   * Elimina un usuario.
   * @param id El ID del usuario a eliminar.
   */
  deleteUser(id: number | undefined): void {
    if (id === undefined) {
      Swal.fire('Error', 'ID de usuario no proporcionado para eliminar.', 'error');
      return;
    }

    Swal.fire({
      title: '¿Estás seguro?',
      text: '¡No podrás revertir esto!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, eliminarlo!',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        this.userService.deleteUser(id).subscribe(
          () => {
            Swal.fire('¡Eliminado!', 'El usuario ha sido eliminado.', 'success');
            this.loadUsers(); // Recarga la lista de usuarios
          },
          (error) => {
            Swal.fire('Error', 'No se pudo eliminar el usuario: ' + error.message, 'error');
          }
        );
      }
    });
  }
}

# components\login-button\login-button.component.scss


# pages\dashboard\dashboard.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8">
  <div class="container-fluid">
    <div class="header-body">
      <!-- Card stats -->
      <div class="row">
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Traffic</h5>
                  <span class="h2 font-weight-bold mb-0">350,897</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-danger text-white rounded-circle shadow">
                    <i class="fas fa-chart-bar"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fa fa-arrow-up"></i> 3.48%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">New users</h5>
                  <span class="h2 font-weight-bold mb-0">2,356</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-warning text-white rounded-circle shadow">
                    <i class="fas fa-chart-pie"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-danger mr-2"><i class="fas fa-arrow-down"></i> 3.48%</span>
                <span class="text-nowrap">Since last week</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Sales</h5>
                  <span class="h2 font-weight-bold mb-0">924</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-yellow text-white rounded-circle shadow">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-warning mr-2"><i class="fas fa-arrow-down"></i> 1.10%</span>
                <span class="text-nowrap">Since yesterday</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Performance</h5>
                  <span class="h2 font-weight-bold mb-0">49,65%</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-info text-white rounded-circle shadow">
                    <i class="fas fa-percent"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fas fa-arrow-up"></i> 12%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="container-fluid mt--7">
  <div class="row">
    <div class="col-xl-8 mb-5 mb-xl-0">
      <div class="card bg-gradient-default shadow">
        <div class="card-header bg-transparent">
          <div class="row align-items-center">
            <div class="col">
              <h6 class="text-uppercase text-light ls-1 mb-1">Overview</h6>
              <h2 class="text-white mb-0">Sales value</h2>
            </div>
            <div class="col">
              <ul class="nav nav-pills justify-content-end">
                <li class="nav-item mr-2 mr-md-0" data-toggle="chart" data-target="#chart-sales"  (click)="data=datasets[0];updateOptions()">
                  <a href="javascript:void(0)" class="nav-link py-2 px-3" [ngClass]="{'active':clicked===true}" data-toggle="tab" (click)="clicked=true;clicked1=false">
                    <span class="d-none d-md-block">Month</span>
                    <span class="d-md-none">M</span>
                  </a>
                </li>
                <li class="nav-item" data-toggle="chart" data-target="#chart-sales"  (click)="data=datasets[1];updateOptions()">
                  <a href="javascript:void(0)" class="nav-link py-2 px-3" [ngClass]="{'active':clicked1===true}" data-toggle="tab" (click)="clicked=false;clicked1=true">
                    <span class="d-none d-md-block">Week</span>
                    <span class="d-md-none">W</span>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="card-body">
          <!-- Chart -->
          <div class="chart">
            <!-- Chart wrapper -->
            <canvas id="chart-sales" class="chart-canvas"></canvas>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-4">
      <div class="card shadow">
        <div class="card-header bg-transparent">
          <div class="row align-items-center">
            <div class="col">
              <h6 class="text-uppercase text-muted ls-1 mb-1">Performance</h6>
              <h2 class="mb-0">Total orders</h2>
            </div>
          </div>
        </div>
        <div class="card-body">
          <!-- Chart -->
          <div class="chart">
            <canvas id="chart-orders" class="chart-canvas"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row mt-5">
    <div class="col-xl-8 mb-5 mb-xl-0">
      <div class="card shadow">
        <div class="card-header border-0">
          <div class="row align-items-center">
            <div class="col">
              <h3 class="mb-0">Page visits</h3>
            </div>
            <div class="col text-right">
              <a href="#!" class="btn btn-sm btn-primary">See all</a>
            </div>
          </div>
        </div>
        <div class="table-responsive">
          <!-- Projects table -->
          <table class="table align-items-center table-flush">
            <thead class="thead-light">
              <tr>
                <th scope="col">Page name</th>
                <th scope="col">Visitors</th>
                <th scope="col">Unique users</th>
                <th scope="col">Bounce rate</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">
                  /argon/
                </th>
                <td>
                  4,569
                </td>
                <td>
                  340
                </td>
                <td>
                  <i class="fas fa-arrow-up text-success mr-3"></i> 46,53%
                </td>
              </tr>
              <tr>
                <th scope="row">
                  /argon/index.html
                </th>
                <td>
                  3,985
                </td>
                <td>
                  319
                </td>
                <td>
                  <i class="fas fa-arrow-down text-warning mr-3"></i> 46,53%
                </td>
              </tr>
              <tr>
                <th scope="row">
                  /argon/charts.html
                </th>
                <td>
                  3,513
                </td>
                <td>
                  294
                </td>
                <td>
                  <i class="fas fa-arrow-down text-warning mr-3"></i> 36,49%
                </td>
              </tr>
              <tr>
                <th scope="row">
                  /argon/tables.html
                </th>
                <td>
                  2,050
                </td>
                <td>
                  147
                </td>
                <td>
                  <i class="fas fa-arrow-up text-success mr-3"></i> 50,87%
                </td>
              </tr>
              <tr>
                <th scope="row">
                  /argon/profile.html
                </th>
                <td>
                  1,795
                </td>
                <td>
                  190
                </td>
                <td>
                  <i class="fas fa-arrow-down text-danger mr-3"></i> 46,53%
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <div class="col-xl-4">
      <div class="card shadow">
        <div class="card-header border-0">
          <div class="row align-items-center">
            <div class="col">
              <h3 class="mb-0">Social traffic</h3>
            </div>
            <div class="col text-right">
              <a href="#!" class="btn btn-sm btn-primary">See all</a>
            </div>
          </div>
        </div>
        <div class="table-responsive">
          <!-- Projects table -->
          <table class="table align-items-center table-flush">
            <thead class="thead-light">
              <tr>
                <th scope="col">Referral</th>
                <th scope="col">Visitors</th>
                <th scope="col"></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">
                  Facebook
                </th>
                <td>
                  1,480
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">60%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-gradient-danger" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  Facebook
                </th>
                <td>
                  5,480
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">70%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-gradient-success" role="progressbar" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" style="width: 70%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  Google
                </th>
                <td>
                  4,807
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">80%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-gradient-primary" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width: 80%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  Instagram
                </th>
                <td>
                  3,678
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">75%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-gradient-info" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  twitter
                </th>
                <td>
                  2,645
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">30%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-gradient-warning" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 30%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>


# pages\user\user.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ UserComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# variables\charts.ts
import Chart from 'chart.js';
//
// Chart extension for making the bars rounded
// Code from: https://codepen.io/jedtrow/full/ygRYgo
//

Chart.elements.Rectangle.prototype.draw = function() {
  var ctx = this._chart.ctx;
  var vm = this._view;
  var left, right, top, bottom, signX, signY, borderSkipped, radius;
  var borderWidth = vm.borderWidth;
  // Set Radius Here
  // If radius is large enough to cause drawing errors a max radius is imposed
  var cornerRadius = 6;

  if (!vm.horizontal) {
    // bar
    left = vm.x - vm.width / 2;
    right = vm.x + vm.width / 2;
    top = vm.y;
    bottom = vm.base;
    signX = 1;
    signY = bottom > top ? 1 : -1;
    borderSkipped = vm.borderSkipped || "bottom";
  } else {
    // horizontal bar
    left = vm.base;
    right = vm.x;
    top = vm.y - vm.height / 2;
    bottom = vm.y + vm.height / 2;
    signX = right > left ? 1 : -1;
    signY = 1;
    borderSkipped = vm.borderSkipped || "left";
  }

  // Canvas doesn't allow us to stroke inside the width so we can
  // adjust the sizes to fit if we're setting a stroke on the line
  if (borderWidth) {
    // borderWidth shold be less than bar width and bar height.
    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
    borderWidth = borderWidth > barSize ? barSize : borderWidth;
    var halfStroke = borderWidth / 2;
    // Adjust borderWidth when bar top position is near vm.base(zero).
    var borderLeft = left + (borderSkipped !== "left" ? halfStroke * signX : 0);
    var borderRight =
      right + (borderSkipped !== "right" ? -halfStroke * signX : 0);
    var borderTop = top + (borderSkipped !== "top" ? halfStroke * signY : 0);
    var borderBottom =
      bottom + (borderSkipped !== "bottom" ? -halfStroke * signY : 0);
    // not become a vertical line?
    if (borderLeft !== borderRight) {
      top = borderTop;
      bottom = borderBottom;
    }
    // not become a horizontal line?
    if (borderTop !== borderBottom) {
      left = borderLeft;
      right = borderRight;
    }
  }

  ctx.beginPath();
  ctx.fillStyle = vm.backgroundColor;
  ctx.strokeStyle = vm.borderColor;
  ctx.lineWidth = borderWidth;

  // Corner points, from bottom-left to bottom-right clockwise
  // | 1 2 |
  // | 0 3 |
  var corners = [[left, bottom], [left, top], [right, top], [right, bottom]];

  // Find first (starting) corner with fallback to 'bottom'
  var borders = ["bottom", "left", "top", "right"];
  var startCorner = borders.indexOf(borderSkipped, 0);
  if (startCorner === -1) {
    startCorner = 0;
  }

  function cornerAt(index) {
    return corners[(startCorner + index) % 4];
  }

  // Draw rectangle from 'startCorner'
  var corner = cornerAt(0);
  ctx.moveTo(corner[0], corner[1]);

  for (var i = 1; i < 4; i++) {
    corner = cornerAt(i);
    let nextCornerId = i + 1;
    if (nextCornerId === 4) {
      nextCornerId = 0;
    }

    // let nextCorner = cornerAt(nextCornerId);

    let width = corners[2][0] - corners[1][0];
    let height = corners[0][1] - corners[1][1];
    let x = corners[1][0];
    let y = corners[1][1];
    // eslint-disable-next-line
    var radius: any = cornerRadius;

    // Fix radius being too large
    if (radius > height / 2) {
      radius = height / 2;
    }
    if (radius > width / 2) {
      radius = width / 2;
    }

    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
  }

  ctx.fill();
  if (borderWidth) {
    ctx.stroke();
  }
};

var mode = 'light';//(themeMode) ? themeMode : 'light';
var fonts = {
  base: 'Open Sans'
}

// Colors
var colors = {
  gray: {
    100: '#f6f9fc',
    200: '#e9ecef',
    300: '#dee2e6',
    400: '#ced4da',
    500: '#adb5bd',
    600: '#8898aa',
    700: '#525f7f',
    800: '#32325d',
    900: '#212529'
  },
  theme: {
    'default': '#172b4d',
    'primary': '#5e72e4',
    'secondary': '#f4f5f7',
    'info': '#11cdef',
    'success': '#2dce89',
    'danger': '#f5365c',
    'warning': '#fb6340'
  },
  black: '#12263F',
  white: '#FFFFFF',
  transparent: 'transparent',
};

export function chartOptions() {

  // Options
  var options = {
    defaults: {
      global: {
        responsive: true,
        maintainAspectRatio: false,
        defaultColor: (mode == 'dark') ? colors.gray[700] : colors.gray[600],
        defaultFontColor: (mode == 'dark') ? colors.gray[700] : colors.gray[600],
        defaultFontFamily: fonts.base,
        defaultFontSize: 13,
        layout: {
          padding: 0
        },
        legend: {
          display: false,
          position: 'bottom',
          labels: {
            usePointStyle: true,
            padding: 16
          }
        },
        elements: {
          point: {
            radius: 0,
            backgroundColor: colors.theme['primary']
          },
          line: {
            tension: .4,
            borderWidth: 4,
            borderColor: colors.theme['primary'],
            backgroundColor: colors.transparent,
            borderCapStyle: 'rounded'
          },
          rectangle: {
            backgroundColor: colors.theme['warning']
          },
          arc: {
            backgroundColor: colors.theme['primary'],
            borderColor: (mode == 'dark') ? colors.gray[800] : colors.white,
            borderWidth: 4
          }
        },
        tooltips: {
          enabled: true,
          mode: 'index',
          intersect: false,
        }
      },
      doughnut: {
        cutoutPercentage: 83,
        legendCallback: function(chart) {
          var data = chart.data;
          var content = '';

          data.labels.forEach(function(label, index) {
            var bgColor = data.datasets[0].backgroundColor[index];

            content += '<span class="chart-legend-item">';
            content += '<i class="chart-legend-indicator" style="background-color: ' + bgColor + '"></i>';
            content += label;
            content += '</span>';
          });

          return content;
        }
      }
    }
  }

  // yAxes
  Chart.scaleService.updateScaleDefaults('linear', {
    gridLines: {
      borderDash: [2],
      borderDashOffset: [2],
      color: (mode == 'dark') ? colors.gray[900] : colors.gray[300],
      drawBorder: false,
      drawTicks: false,
      drawOnChartArea: (mode == 'dark') ? false : true,
      lineWidth: 1,
      zeroLineWidth: 0,
      zeroLineColor: (mode == 'dark') ? colors.gray[900] : colors.gray[300],
      zeroLineBorderDash: [2],
      zeroLineBorderDashOffset: [2]
    },
    ticks: {
      beginAtZero: true,
      padding: 10,
      callback: function(value) {
        if (!(value % 10)) {
          return value
        }
      }
    }
  });

  // xAxes
  Chart.scaleService.updateScaleDefaults('category', {
    gridLines: {
      drawBorder: false,
      drawOnChartArea: false,
      drawTicks: false
    },
    ticks: {
      padding: 20
    },
    datasets: [{
        maxBarThickness: 10
    }]
  });

  return options;

}

export const parseOptions = (parent, options) => {
		for (var item in options) {
			if (typeof options[item] !== 'object') {
				parent[item] = options[item];
			} else {
				parseOptions(parent[item], options[item]);
			}
		}
	}

export const chartExample1 = {
  options: {
    scales: {
      yAxes: [{
        gridLines: {
          color: colors.gray[900],
          zeroLineColor: colors.gray[900],
          drawOnChartArea: false
        },
        ticks: {
          callback: function(value) {
            if (!(value % 10)) {
              return '$' + value + 'k';
            }
          }
        }
      }]
    }
  },
  data: {
    labels: ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    datasets: [{
      label: 'Performance',
      data: [0, 20, 10, 30, 15, 40, 20, 60, 60]
    }]
  }
}

export const chartExample2 = {
  options: {
    scales: {
      yAxes: [
        {
          ticks: {
            callback: function(value) {
              if (!(value % 10)) {
                //return '$' + value + 'k'
                return value;
              }
            }
          }
        }
      ]
    },
    tooltips: {
      callbacks: {
        label: function(item, data) {
          var label = data.datasets[item.datasetIndex].label || "";
          var yLabel = item.yLabel;
          var content = "";
          if (data.datasets.length > 1) {
            content += label;
          }
          content += yLabel;
          return content;
        }
      }
    }
  },
  data: {
    labels: ["Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    datasets: [
      {
        label: "Sales",
        data: [25, 20, 30, 22, 17, 29],
        maxBarThickness: 10
      }
    ]
  }
}


# pages\user\user.component.scss
.btn-info {
  background-color: #11cdef;
  border-color: #11cdef;
  color: white;
  margin-right: 5px; /* Pequeño margen entre botones */
  box-shadow: 0 2px 4px rgba(17, 205, 239, 0.2); /* Sombra sutil */
  border-radius: .375rem; /* Bordes redondeados */
  &:hover {
    background-color: #0da5c0;
    border-color: #0da5c0;
    box-shadow: 0 4px 8px rgba(17, 205, 239, 0.3);
  }
}

.btn-danger {
  background-color: #f5365c;
  border-color: #f5365c;
  color: white;
  box-shadow: 0 2px 4px rgba(245, 54, 92, 0.2);
  border-radius: .375rem;
  &:hover {
    background-color: #ec0c38;
    border-color: #ec0c38;
    box-shadow: 0 4px 8px rgba(245, 54, 92, 0.3);
  }
}

.btn-primary {
  background-color: #5e72e4;
  border-color: #5e72e4;
  color: white;
  box-shadow: 0 4px 6px rgba(50, 50, 93, .11), 0 1px 3px rgba(0, 0, 0, .08);
  border-radius: .375rem;
  &:hover {
    background-color: #324cdd;
    border-color: #324cdd;
    box-shadow: 0 7px 14px rgba(50, 50, 93, .1), 0 3px 6px rgba(0, 0, 0, .08);
  }
}

.table {
  thead th {
    background-color: #f6f9fc;
    color: #8898aa;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.85rem;
  }
  tbody tr {
    transition: background-color 0.2s ease-in-out;
    &:hover {
      background-color: #f8f9fe;
    }
  }
  td {
    vertical-align: middle;
    font-size: 0.95rem;
  }
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-stats {
  .card-body {
    padding: 1rem 1.5rem;
  }
  .icon-shape {
    font-size: 1.5rem;
  }
  .card-title {
    font-size: 0.8rem;
  }
  .h2 {
    font-size: 1.5rem;
  }
}

/* Estilos para SweetAlert2 */
.swal2-popup {
  font-family: "Open Sans", sans-serif;
  border-radius: .375rem;
}

.swal2-title {
  color: #32325d;
  font-weight: 600;
}

.swal2-input {
  border: 1px solid #cad1d7;
  border-radius: .375rem;
  padding: .625rem .75rem;
  width: calc(100% - 24px); /* Ajusta el ancho para el padding */
  margin-bottom: 1rem;
  &:focus {
    border-color: #5e72e4;
    box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
  }
}

# services\user.service.spec.ts
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


# guardians\no-authenticated.guard.ts
import { Injectable } from "@angular/core";
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from "@angular/router";
import { Observable } from "rxjs";
import { SecurityService } from "../services/security.service";

@Injectable({
    providedIn: "root",
})
export class NoAuthenticatedGuard implements CanActivate {
    constructor(private securityService: SecurityService, private router: Router) {}
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
        if (!this.securityService.existSession()) {
            return true;
        } else {
            this.router.navigate(["/dashboard"]);
            return false;
        }
    }
}


# pages\user\user.component.html
<div class="header bg-gradient-primary pb-8 pt-5 pt-md-8">
  <div class="container-fluid">
    <div class="header-body">
      <!-- Card stats -->
      <div class="row">
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Total Usuarios</h5>
                  <span class="h2 font-weight-bold mb-0">{{ users.length }}</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-danger text-white rounded-circle shadow">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Page content -->
<div class="container-fluid mt--7">
  <!-- Table -->
  <div class="row">
    <div class="col">
      <div class="card shadow">
        <div class="card-header border-0">
          <h3 class="mb-0">Gestión de Usuarios</h3>
          <button class="btn btn-primary float-right" (click)="openCreateForm()"><i class="fas fa-plus"></i> Nuevo Usuario</button>
        </div>
        <div class="table-responsive">
          <table class="table align-items-center table-flush">
            <thead class="thead-light">
              <tr>
                <th scope="col">ID</th>
                <th scope="col">Nombre</th>
                <th scope="col">Email</th>
                <th scope="col">Acciones</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let user of users">
                <td>{{ user.id }}</td>
                <td>{{ user.name }}</td>
                <td>{{ user.email }}</td>
                <td>
                  <button class="btn btn-sm btn-info" (click)="editUser(user)"><i class="fas fa-edit"></i> Editar</button>
                  <button class="btn btn-sm btn-danger" (click)="deleteUser(user.id)"><i class="fas fa-trash"></i> Eliminar</button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>


# components\footer\footer.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ FooterComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# services\user.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from 'src/environments/environment';

// Definición de la interfaz User
// Asumo que esta interfaz ya existe o se creará.
// Si tus modelos están en otro lugar, ajusta la ruta de importación.
import { User } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  // URL base para el backend de usuarios. Ajusta esta URL a tu backend local.
  // Es importante que esta URL apunte al endpoint correcto para la gestión de usuarios.
  private apiUrl = `${environment.url_ms_back}/users`;

  // Opciones HTTP, incluyendo cabeceras para solicitudes JSON.
  private httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  };

  constructor(private http: HttpClient) { }

  /**
   * Maneja errores HTTP.
   * @param error El objeto de error HTTP.
   * @returns Un observable con un error.
   */
  private handleError(error: any): Observable<never> {
    console.error('An error occurred:', error);
    // Devuelve un observable con un mensaje de error legible por el usuario.
    return throwError('Something bad happened; please try again later.');
  }

  /**
   * Obtiene todos los usuarios del backend.
   * @returns Un Observable que emite un array de usuarios.
   */
  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(this.apiUrl, this.httpOptions)
      .pipe(
        catchError(this.handleError)
      );
  }

  /**
   * Obtiene un usuario por su ID.
   * @param id El ID del usuario a obtener.
   * @returns Un Observable que emite el usuario encontrado.
   */
  getUserById(id: number): Observable<User> {
    const url = `${this.apiUrl}/${id}`;
    return this.http.get<User>(url, this.httpOptions)
      .pipe(
        catchError(this.handleError)
      );
  }

  /**
   * Crea un nuevo usuario.
   * @param user El objeto usuario a crear.
   * @returns Un Observable que emite el usuario creado.
   */
  createUser(user: User): Observable<User> {
    return this.http.post<User>(this.apiUrl, user, this.httpOptions)
      .pipe(
        catchError(this.handleError)
      );
  }

  /**
   * Actualiza un usuario existente.
   * @param user El objeto usuario con los datos actualizados. Se asume que el objeto incluye el ID.
   * @returns Un Observable que emite el usuario actualizado.
   */
  updateUser(user: User): Observable<User> {
    const url = `${this.apiUrl}/${user.id}`;
    return this.http.put<User>(url, user, this.httpOptions)
      .pipe(
        catchError(this.handleError)
      );
  }

  /**
   * Elimina un usuario por su ID.
   * @param id El ID del usuario a eliminar.
   * @returns Un Observable que emite un objeto vacío cuando la eliminación es exitosa.
   */
  deleteUser(id: number): Observable<{}> {
    const url = `${this.apiUrl}/${id}`;
    return this.http.delete(url, this.httpOptions)
      .pipe(
        catchError(this.handleError)
      );
  }
}

# pages\theaters\theaters.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { TheatersRoutingModule } from './theaters-routing.module';
import { ListComponent } from './list/list.component';
import { ManageComponent } from './manage/manage.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';


@NgModule({
  declarations: [
    ListComponent,
    ManageComponent
  ],
  imports: [
    CommonModule,
    TheatersRoutingModule,
    FormsModule,
    ReactiveFormsModule // Para que funcionen los validators
  ]
})
export class TheatersModule { }


# pages\theaters\theaters-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListComponent } from './list/list.component';
import { ManageComponent } from './manage/manage.component';

const routes: Routes = [
  {path: 'list', component:ListComponent},
  {path: 'create', component:ManageComponent},
  {path: 'view/:id', component:ManageComponent},
  {path: 'update/:id', component:ManageComponent}
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class TheatersRoutingModule { }


# services\theater.service.ts
import { Injectable } from '@angular/core';
import { Theater } from '../models/theater.model';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class TheaterService {
  constructor(private http: HttpClient) { }
  list(): Observable<Theater[]> {
    return this.http.get<Theater[]>(`${environment.url_ms_cinema}/theaters`);
  }
  view(id: number):Observable<Theater> {
    return this.http.get<Theater>(`${environment.url_ms_cinema}/theaters/${id}`);
  }
  create(newTheater: Theater):Observable<Theater> {
    delete newTheater.id; // El ID nunca se manipula...
    return this.http.post<Theater>(`${environment.url_ms_cinema}/theaters`,newTheater);
  }
  update(theTheater: Theater):Observable<Theater> {
    return this.http.put<Theater>(`${environment.url_ms_cinema}/theaters/${theTheater.id}`,theTheater);
  }

  delete(id: number) {
    return this.http.delete<Theater>(`${environment.url_ms_cinema}/theaters/${id}`);
  }
}


# guardians\no-authenticated.guard.spec.ts
import { TestBed } from '@angular/core/testing';

import { NoAuthenticatedGuard } from './no-authenticated.guard';

describe('NoAuthenticatedGuard', () => {
  let guard: NoAuthenticatedGuard;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    guard = TestBed.inject(NoAuthenticatedGuard);
  });

  it('should be created', () => {
    expect(guard).toBeTruthy();
  });
});


# layouts\auth-layout\auth-layout.routing.ts
import { Routes } from "@angular/router";

import { LoginComponent } from "../../pages/login/login.component";
import { RegisterComponent } from "../../pages/register/register.component";
import { NoAuthenticatedGuard } from "src/app/guardians/no-authenticated.guard";

export const AuthLayoutRoutes: Routes = [
    { path: "login", component: LoginComponent, canActivate: [NoAuthenticatedGuard] },
    { path: "register", component: RegisterComponent, canActivate: [NoAuthenticatedGuard] },
];


# pages\tables\tables.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-tables',
  templateUrl: './tables.component.html',
  styleUrls: ['./tables.component.scss']
})
export class TablesComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}


# services\theater.service.spec.ts
import { TestBed } from '@angular/core/testing';

import { TheaterService } from './theater.service';

describe('TheaterService', () => {
  let service: TheaterService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(TheaterService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


# guardians\authenticated.guard.ts
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { SecurityService } from '../services/security.service'; // Asegúrate de que SecurityService tenga el método existSession()

@Injectable({
  providedIn: 'root',
})
export class AuthenticatedGuard implements CanActivate {
  constructor(private securityService: SecurityService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    // Si existe una sesión activa (el usuario está logueado)
    if (this.securityService.existSession()) {
      // Permite el acceso a la ruta solicitada.
      // Ya NO redirigimos a /dashboard aquí; el usuario debe poder ir a la ruta protegida que pidió.
      return true;
    } else {
      // Si NO hay sesión activa, redirige a la página de login y niega el acceso.
      console.log('AuthenticatedGuard: No hay sesión activa, redirigiendo a /login');
      this.router.navigate(['/login']);
      return false; // Bloquea el acceso a la ruta actual.
    }
  }
}


# models\profile.model.ts
import { User } from './user.model';

export class Profile {
  user?: User;
  id?: number;
  phone?: string;
  photo?: string;
}


# pages\tables\tables.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { TablesComponent } from './tables.component';

describe('TablesComponent', () => {
  let component: TablesComponent;
  let fixture: ComponentFixture<TablesComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ TablesComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(TablesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# services\security.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { User } from '../models/user.model';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router'; // Asegúrate de importar Router
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root',
})
export class SecurityService {
  // Es la variable "famosa" (Reactiva globalmente... Similar a redux)
  theUser = new BehaviorSubject<User>(new User());
  constructor(private http: HttpClient, private router: Router) {
    // Inyectar Router aquí
    this.verifyActualSession();
  }

  /**
   * Realiza la petición al backend con el correo y la contraseña
   * para verificar si existe o no en la plataforma
   * @param infoUsuario JSON con la información de correo y contraseña
   * @returns Respuesta HTTP la cual indica si el usuario tiene permiso de acceso
   */
  login(user: User): Observable<any> {
    return this.http.post<any>(`${environment.url_ms_security}/login`, user);
  }
  /*
  Guardar la información de usuario en el local storage
  */
  saveSession(dataSesion: any) {
    let data: User = {
      id: dataSesion['user']['id'],
      name: dataSesion['user']['name'],
      email: dataSesion['user']['email'],
      password: '', // La contraseña no debe guardarse en la sesión
      //role:dataSesion["user"]["role"],
      token: dataSesion['token'],
    };
    // Tratar de cifrar los datos: Tareas
    // Importante: No estamos guardando aquí el 'google_token' de Google Auth.
    // Si la autenticación principal es Google, 'existSession' debe depender de 'google_token'.
    localStorage.setItem('sesion', JSON.stringify(data));
    this.setUser(data);
  }
  /**
   * Permite actualizar la información del usuario
   * que acabó de validarse correctamente
   * @param user información del usuario logueado
   */
  setUser(user: User) {
    // El "next()" notifica el cambio a todos los que están suscritos a cambios...
    this.theUser.next(user);
  }
  /**
   * Permite obtener la información del usuario
   * con datos tales como el identificador y el token
   * @returns
   */
  getUser() {
    return this.theUser.asObservable();
  }
  /**
   * Permite obtener la información de usuario
   * que tiene la función activa y servirá
   * para acceder a la información del token
   */
  public get activeUserSession(): User {
    return this.theUser.value;
  }

  /**
   * Permite cerrar la sesión del usuario
   * que estaba previamente logueado
   */
  logout() {
    localStorage.removeItem('sesion');
    // Si usas Google Auth, también debes eliminar google_token
    localStorage.removeItem('google_token');
    this.setUser(new User());
    // Redirigir al login después de cerrar sesión
    this.router.navigate(['/login']);
  }
  /**
   * Permite verificar si actualmente en el local storage
   * existe información de un usuario previamente logueado
   */
  verifyActualSession() {
    let actualSesion = this.getSessionData();
    if (actualSesion) {
      this.setUser(JSON.parse(actualSesion));
    }
    // Si el google_token existe, también se considera una sesión activa.
    // Esto es crucial para la integración con Google Sign-In.
    if (localStorage.getItem('google_token')) {
      // Podrías cargar los datos del usuario de Google aquí si no lo hace ya AuthService
      // Para simplificar, solo verificamos la existencia del token.
      console.log('google_token encontrado, sesión activa');
    }
  }
  /**
   * Verifica si hay una sesion activa
   * @returns
   */
  existSession(): boolean {
    // La sesión existe si hay un token de Google O una sesión "tradicional"
    return !!localStorage.getItem('google_token') || !!localStorage.getItem('sesion');
  }
  /**
   * Permite obtener los dato de la sesión activa en el
   * local storage
   * @returns
   */
  getSessionData() {
    let sesionActual = localStorage.getItem('sesion');
    return sesionActual;
  }
}


# app.routing.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
import { Routes, RouterModule } from '@angular/router';

import { AdminLayoutComponent } from './layouts/admin-layout/admin-layout.component';
import { AuthLayoutComponent } from './layouts/auth-layout/auth-layout.component';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'dashboard',
    pathMatch: 'full',
  },
  {
    path: '',
    component: AdminLayoutComponent,
    children: [
      {
        path: '',
        loadChildren: () => import('src/app/layouts/admin-layout/admin-layout.module').then((m) => m.AdminLayoutModule),
      },
    ],
  },
  {
    path: '',
    component: AuthLayoutComponent,
    children: [
      {
        path: '',
        loadChildren: () => import('src/app/layouts/auth-layout/auth-layout.module').then((m) => m.AuthLayoutModule),
      },
    ],
  },
  {
    path: '**',
    redirectTo: 'dashboard',
  },
];

@NgModule({
  imports: [
    CommonModule,
    BrowserModule,
    RouterModule.forRoot(routes, {
      useHash: true,
    }),
  ],
  exports: [RouterModule],
})
export class AppRoutingModule {}


# app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'argon-dashboard-angular';
}


# layouts\auth-layout\auth-layout.module.ts
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthLayoutRoutes } from './auth-layout.routing';
import { LoginComponent } from '../../pages/login/login.component';
import { RegisterComponent } from '../../pages/register/register.component';
import { ComponentsModule } from '../../components/components.module';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild(AuthLayoutRoutes),
    FormsModule,
    ComponentsModule, // Permite usar <app-login-button> en LoginComponent
    NgbModule, // Permite usar directivas de ng-bootstrap en el layout
  ],
  declarations: [LoginComponent, RegisterComponent],
})
export class AuthLayoutModule {}


# pages\tables\tables.component.scss


# services\auth.service.ts
import { Injectable, NgZone } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { jwtDecode } from 'jwt-decode';
import { environment } from 'src/environments/environment';
import { Router } from '@angular/router';

// Declaramos la variable global para que TypeScript no marque error.
declare const google: any;

interface GoogleCredentialResponse {
  credential: string;
  select_by: string;
}

export interface GoogleUser {
  aud: string;
  azp: string;
  email: string;
  email_verified: boolean;
  exp: number;
  family_name: string;
  given_name: string;
  iat: number;
  iss: string;
  jti: string;
  name: string;
  picture: string;
  sub: string;
}

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private userSubject = new BehaviorSubject<GoogleUser | null>(null);
  public user$: Observable<GoogleUser | null> = this.userSubject.asObservable();

  constructor(private ngZone: NgZone, private router: Router) {
    this.loadGsiSdk();
  }

  private loadGsiSdk(): void {
    const attempt = () => {
      if (google && google.accounts && google.accounts.id) {
        this.initGoogleSdkInternal();
      } else {
        setTimeout(attempt, 200);
      }
    };
    attempt();
  }

  private initGoogleSdkInternal(): void {
    google.accounts.id.initialize({
      client_id: environment.googleClientId,
      callback: (response: GoogleCredentialResponse) => {
        this.handleCredentialResponse(response);
      },
    });

    const storedToken = localStorage.getItem('google_token');
    if (storedToken) {
      try {
        const decoded: GoogleUser = jwtDecode(storedToken);
        if (decoded.exp * 1000 > Date.now()) {
          this.ngZone.run(() => {
            this.userSubject.next(decoded);
          });
        } else {
          localStorage.removeItem('google_token');
        }
      } catch {
        localStorage.removeItem('google_token');
      }
    }
  }

  public renderGoogleButton(elementId: string): void {
    if (document.getElementById(elementId)) {
      google.accounts.id.renderButton(document.getElementById(elementId), {
        theme: 'outline',
        size: 'large',
        type: 'standard',
        shape: 'rectangular',
        text: 'signin_with',
        logo_alignment: 'left',
      });
    }
  }

  private handleCredentialResponse(response: GoogleCredentialResponse): void {
    try {
      const token = response.credential;
      localStorage.setItem('google_token', token);
      const decoded: GoogleUser = jwtDecode(token);

      this.ngZone.run(() => {
        this.userSubject.next(decoded);
        // La redirección ahora se maneja en el componente para mayor flexibilidad
      });
    } catch (err) {
      console.error('Error decodificando token de Google:', err);
    }
  }

  public signOut(): void {
    // google.accounts.id.disableAutoSelect(); // Opcional, para la próxima visita
    this.userSubject.next(null);
    localStorage.removeItem('google_token');
    this.router.navigate(['/login']);
  }
}


# interceptors\auth.interceptor.ts
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse
} from '@angular/common/http';
import { catchError, Observable } from 'rxjs';
import { SecurityService } from '../services/security.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private securityService: SecurityService,
    private router: Router) { }
  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    let theUser = this.securityService.activeUserSession
    const token = theUser["token"];
    // Si la solicitud es para la ruta de "login", no adjuntes el token
    if (request.url.includes('/login') || request.url.includes('/token-validation')) {
      console.log("no se pone token")
      return next.handle(request);
    } else {
      console.log("colocando token " + token)
      // Adjunta el token a la solicitud
      const authRequest = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`,
        },
      });
      return next.handle(authRequest).pipe(
        catchError((err: HttpErrorResponse) => {
          if (err.status === 401) {
            Swal.fire({
              title: 'No está autorizado para esta operación',
              icon: 'error',
              timer: 5000
            });
            this.router.navigateByUrl('/dashboard');
          } else if (err.status === 400) {
            Swal.fire({
              title: 'Existe un error, contacte al administrador',
              icon: 'error',
              timer: 5000
            });
          }

          return new Observable<never>();

        }));
    }
    // Continúa con la solicitud modificada

  }

}

# layouts\auth-layout\auth-layout.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-auth-layout',
  templateUrl: './auth-layout.component.html',
  styleUrls: ['./auth-layout.component.scss']
})
export class AuthLayoutComponent implements OnInit, OnDestroy {
  test: Date = new Date();
  public isCollapsed = true;

  constructor(private router: Router) { }

  ngOnInit() {
    var html = document.getElementsByTagName("html")[0];
    html.classList.add("auth-layout");
    var body = document.getElementsByTagName("body")[0];
    body.classList.add("bg-default");
    this.router.events.subscribe((event) => {
      this.isCollapsed = true;
   });

  }
  ngOnDestroy() {
    var html = document.getElementsByTagName("html")[0];
    html.classList.remove("auth-layout");
    var body = document.getElementsByTagName("body")[0];
    body.classList.remove("bg-default");
  }
}


# pages\tables\tables.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8">
  <div class="container-fluid">
    <div class="header-body">
      <!-- Card stats -->
      <div class="row">
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Traffic</h5>
                  <span class="h2 font-weight-bold mb-0">350,897</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-danger text-white rounded-circle shadow">
                    <i class="fas fa-chart-bar"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fa fa-arrow-up"></i> 3.48%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">New users</h5>
                  <span class="h2 font-weight-bold mb-0">2,356</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-warning text-white rounded-circle shadow">
                    <i class="fas fa-chart-pie"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-danger mr-2"><i class="fas fa-arrow-down"></i> 3.48%</span>
                <span class="text-nowrap">Since last week</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Sales</h5>
                  <span class="h2 font-weight-bold mb-0">924</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-yellow text-white rounded-circle shadow">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-warning mr-2"><i class="fas fa-arrow-down"></i> 1.10%</span>
                <span class="text-nowrap">Since yesterday</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Performance</h5>
                  <span class="h2 font-weight-bold mb-0">49,65%</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-info text-white rounded-circle shadow">
                    <i class="fas fa-percent"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fas fa-arrow-up"></i> 12%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Page content -->
<div class="container-fluid mt--7">
  <!-- Table -->
  <div class="row">
    <div class="col">
      <div class="card shadow">
        <div class="card-header border-0">
          <h3 class="mb-0">Card tables</h3>
        </div>
        <div class="table-responsive">
          <table class="table align-items-center table-flush">
            <thead class="thead-light">
              <tr>
                <th scope="col">Project</th>
                <th scope="col">Budget</th>
                <th scope="col">Status</th>
                <th scope="col">Users</th>
                <th scope="col">Completion</th>
                <th scope="col"></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/bootstrap.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Argon Design System</span>
                    </div>
                  </div>
                </th>
                <td>
                  $2,500 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-warning"></i> pending
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">60%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-warning" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="bottom-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/angular.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Angular Now UI Kit PRO</span>
                    </div>
                  </div>
                </th>
                <td>
                  $1,800 USD
                </td>
                <td>
                  <span class="badge badge-dot">
                    <i class="bg-success"></i> completed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">100%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown  placement="bottom-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/sketch.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Black Dashboard</span>
                    </div>
                  </div>
                </th>
                <td>
                  $3,150 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-danger"></i> delayed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">72%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" aria-valuenow="72" aria-valuemin="0" aria-valuemax="100" style="width: 72%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown  placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/react.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">React Material Dashboard</span>
                    </div>
                  </div>
                </th>
                <td>
                  $4,400 USD
                </td>
                <td>
                  <span class="badge badge-dot">
                    <i class="bg-info"></i> on schedule
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">90%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-info" role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 90%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown   placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/vue.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Vue Paper UI Kit PRO</span>
                    </div>
                  </div>
                </th>
                <td>
                  $2,200 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-success"></i> completed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">100%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown   placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="card-footer py-4">
          <nav aria-label="...">
            <ul class="pagination justify-content-end mb-0">
              <li class="page-item disabled">
                <a class="page-link" href="javascript:void(0)" tabindex="-1">
                  <i class="fas fa-angle-left"></i>
                  <span class="sr-only">Previous</span>
                </a>
              </li>
              <li class="page-item active">
                <a class="page-link" href="javascript:void(0)">1</a>
              </li>
              <li class="page-item">
                <a class="page-link" href="javascript:void(0)">2 <span class="sr-only">(current)</span></a>
              </li>
              <li class="page-item"><a class="page-link" href="javascript:void(0)">3</a></li>
              <li class="page-item">
                <a class="page-link" href="javascript:void(0)">
                  <i class="fas fa-angle-right"></i>
                  <span class="sr-only">Next</span>
                </a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
  <!-- Dark table -->
  <div class="row mt-5">
    <div class="col">
      <div class="card bg-default shadow">
        <div class="card-header bg-transparent border-0">
          <h3 class="text-white mb-0">Card tables</h3>
        </div>
        <div class="table-responsive">
          <table class="table align-items-center table-dark table-flush">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Project</th>
                <th scope="col">Budget</th>
                <th scope="col">Status</th>
                <th scope="col">Users</th>
                <th scope="col">Completion</th>
                <th scope="col"></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/bootstrap.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Argon Design System</span>
                    </div>
                  </div>
                </th>
                <td>
                  $2,500 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-warning"></i> pending
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">60%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-warning" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="bottom-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/angular.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Angular Now UI Kit PRO</span>
                    </div>
                  </div>
                </th>
                <td>
                  $1,800 USD
                </td>
                <td>
                  <span class="badge badge-dot">
                    <i class="bg-success"></i> completed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">100%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="bottom-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/sketch.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Black Dashboard</span>
                    </div>
                  </div>
                </th>
                <td>
                  $3,150 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-danger"></i> delayed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">72%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" aria-valuenow="72" aria-valuemin="0" aria-valuemax="100" style="width: 72%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/react.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">React Material Dashboard</span>
                    </div>
                  </div>
                </th>
                <td>
                  $4,400 USD
                </td>
                <td>
                  <span class="badge badge-dot">
                    <i class="bg-info"></i> on schedule
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">90%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-info" role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 90%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <th scope="row">
                  <div class="media align-items-center">
                    <a href="javascript:void(0)" class="avatar rounded-circle mr-3">
                      <img alt="Image placeholder" src="../assets/img/theme/vue.jpg">
                    </a>
                    <div class="media-body">
                      <span class="mb-0 text-sm">Vue Paper UI Kit PRO</span>
                    </div>
                  </div>
                </th>
                <td>
                  $2,200 USD
                </td>
                <td>
                  <span class="badge badge-dot mr-4">
                    <i class="bg-success"></i> completed
                  </span>
                </td>
                <td>
                  <div class="avatar-group">
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Ryan Tompson">
                      <img alt="Image placeholder" src="../assets/img/theme/team-1-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Romina Hadid">
                      <img alt="Image placeholder" src="../assets/img/theme/team-2-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Alexander Smith">
                      <img alt="Image placeholder" src="../assets/img/theme/team-3-800x800.jpg" class="rounded-circle">
                    </a>
                    <a href="javascript:void(0)" class="avatar avatar-sm" data-toggle="tooltip" data-original-title="Jessica Doe">
                      <img alt="Image placeholder" src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                    </a>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <span class="mr-2">100%</span>
                    <div>
                      <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td class="text-right">
                  <div ngbDropdown placement="top-right">
                    <a class="btn btn-sm btn-icon-only text-light"  ngbDropdownToggle>
                      <i class="fas fa-ellipsis-v"></i>
                    </a>
                    <div ngbDropdownMenu class=" dropdown-menu-right dropdown-menu-arrow">
                      <a class="dropdown-item" href="javascript:void(0)">Action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Another action</a>
                      <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
                    </div>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>


# guardians\authenticated.guard.spec.ts
import { TestBed } from '@angular/core/testing';

import { AuthenticatedGuard } from './authenticated.guard';

describe('AuthenticatedGuard', () => {
  let guard: AuthenticatedGuard;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    guard = TestBed.inject(AuthenticatedGuard);
  });

  it('should be created', () => {
    expect(guard).toBeTruthy();
  });
});


# interceptors\auth.interceptor.spec.ts
import { TestBed } from '@angular/core/testing';

import { AuthInterceptor } from './auth.interceptor';

describe('AuthInterceptor', () => {
  beforeEach(() => TestBed.configureTestingModule({
    providers: [
      AuthInterceptor
      ]
  }));

  it('should be created', () => {
    const interceptor: AuthInterceptor = TestBed.inject(AuthInterceptor);
    expect(interceptor).toBeTruthy();
  });
});


# layouts\auth-layout\auth-layout.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { AuthLayoutComponent } from './auth-layout.component';

describe('AuthLayoutComponent', () => {
  let component: AuthLayoutComponent;
  let fixture: ComponentFixture<AuthLayoutComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ AuthLayoutComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(AuthLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\seats\seats-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class SeatsRoutingModule { }


# layouts\auth-layout\auth-layout.component.scss


# pages\seats\seats.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SeatsRoutingModule } from './seats-routing.module';


@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    SeatsRoutingModule
  ]
})
export class SeatsModule { }


# components\components.module.spec.ts
import { ComponentsModule } from './components.module';

describe('ComponentsModule', () => {
  let componentsModule: ComponentsModule;

  beforeEach(() => {
    componentsModule = new ComponentsModule();
  });

  it('should create an instance', () => {
    expect(componentsModule).toBeTruthy();
  });
});


# models\permission.model.spec.ts
import { Permission } from './permission.model';

describe('Permission', () => {
  it('should create an instance', () => {
    expect(new Permission()).toBeTruthy();
  });
});


# layouts\auth-layout\auth-layout.component.html
<div class="main-content">
  <nav class="navbar navbar-top navbar-horizontal navbar-expand-md navbar-dark">
    <div class="container px-4">
      <a class="navbar-brand" routerLinkActive="active" [routerLink]="['/dashboard']">
        <img src="assets/img/brand/argon-white.png" />
      </a>
      <button class="navbar-toggler" type="button" (click)="isCollapsed = !isCollapsed" aria-controls="sidenav-collapse-main">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" [ngbCollapse]="isCollapsed" id="sidenav-collapse-main">
        <!-- Collapse header -->
        <div class="navbar-collapse-header d-md-none">
          <div class="row">
            <div class="col-6 collapse-brand">
              <a routerLinkActive="active" [routerLink]="['/dashboard']">
                <img src="assets/img/brand/blue.png" />
              </a>
            </div>
            <div class="col-6 collapse-close">
              <button type="button" class="navbar-toggler" (click)="isCollapsed = !isCollapsed">
                <span></span>
                <span></span>
              </button>
            </div>
          </div>
        </div>
        <!-- Navbar items -->
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link nav-link-icon" routerLinkActive="active" [routerLink]="['/dashboard']">
              <i class="ni ni-planet"></i>
              <span class="nav-link-inner--text">Dashboard</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link nav-link-icon" routerLinkActive="active" [routerLink]="['/register']">
              <i class="ni ni-circle-08"></i>
              <span class="nav-link-inner--text">Register</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link nav-link-icon" routerLinkActive="active" [routerLink]="['/login']">
              <i class="ni ni-key-25"></i>
              <span class="nav-link-inner--text">Login</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link nav-link-icon" routerLinkActive="active" [routerLink]="['/user-profile']">
              <i class="ni ni-single-02"></i>
              <span class="nav-link-inner--text">Profile</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  <router-outlet></router-outlet>
</div>
<footer class="py-5">
  <div class="container">
    <div class="row align-items-center justify-content-xl-between">
      <div class="col-xl-6">
        <div class="copyright text-center text-xl-left text-muted">&copy; {{ test | date : 'yyyy' }} <a href="https://www.creative-tim.com?ref=ada-footer-auth-layout" class="font-weight-bold ml-1" target="_blank">Creative Tim</a></div>
      </div>
      <div class="col-xl-6">
        <ul class="nav nav-footer justify-content-center justify-content-xl-end">
          <li class="nav-item">
            <a href="https://www.creative-tim.com?ref=ada-footer-auth-layout" class="nav-link" target="_blank">Creative Tim</a>
          </li>
          <li class="nav-item">
            <a href="https://www.creative-tim.com/presentation?ref=ada-footer-auth-layout" class="nav-link" target="_blank">About Us</a>
          </li>
          <li class="nav-item">
            <a href="http://blog.creative-tim.com?ref=ada-footer-auth-layout" class="nav-link" target="_blank">Blog</a>
          </li>
          <li class="nav-item">
            <a href="https://github.com/creativetimofficial/argon-dashboard-angular/blob/master/LICENSE.md" class="nav-link" target="_blank">MIT License</a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</footer>


# services\auth.service.spec.ts
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


# pages\register\register.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}


# layouts\admin-layout\admin-layout.routing.ts
import { Routes } from '@angular/router';

import { DashboardComponent } from '../../pages/dashboard/dashboard.component';
import { IconsComponent } from '../../pages/icons/icons.component';
import { MapsComponent } from '../../pages/maps/maps.component';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { TablesComponent } from '../../pages/tables/tables.component';
import { AuthenticatedGuard } from 'src/app/guardians/authenticated.guard';
import { UsersComponent } from 'src/app/pages/user/user.component';

export const AdminLayoutRoutes: Routes = [
  { path: 'dashboard', component: DashboardComponent },
  { path: 'user-profile', component: UserProfileComponent, canActivate: [AuthenticatedGuard] },
  { path: 'tables', component: TablesComponent },
  { path: 'icons', component: IconsComponent },
  { path: 'maps', component: MapsComponent },
  { path: 'users', component: UsersComponent, canActivate: [AuthenticatedGuard] },
  {
    path: 'theaters',
    canActivate: [AuthenticatedGuard],
    children: [
      {
        path: '',
        loadChildren: () => import('src/app/pages/theaters/theaters.module').then((m) => m.TheatersModule),
      },
    ],
  },
];


# models\password.model.ts
import { User } from './user.model';

export class Password {
  user?: User; // Si es así?
  id?: number;
  content?: string;
  startAt?: Date;
  endAt?: Date;
}


# pages\register\register.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ RegisterComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\user.model.ts
import { Address } from "./address.model";
import { Password } from "./password.model";
import { Profile } from "./profile.model";
import { Role } from "./role.model";

export class User {
    id?: number;
    name?: string;
    email: string;
    password: string; // No tengo claro si es de tipo "Password" o string
    token?: string;
    address?: Address
    profile?: Profile
    roles?: Role[]
    // Rey add Session here
    // Rey add Device here
    // Rey add SecurityQuestion here
    // Rey add Answer here
    // Rey add DigitalSignature here
    // Rey add Permission here
}


# layouts\admin-layout\admin-layout.module.ts
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { ClipboardModule } from 'ngx-clipboard';

import { AdminLayoutRoutes } from './admin-layout.routing';
import { DashboardComponent } from '../../pages/dashboard/dashboard.component';
import { IconsComponent } from '../../pages/icons/icons.component';
import { MapsComponent } from '../../pages/maps/maps.component';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { TablesComponent } from '../../pages/tables/tables.component';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
// import { ToastrModule } from 'ngx-toastr';

// Importa ComponentsModule para que los componentes de este módulo puedan usar el sidebar, navbar, etc.
import { ComponentsModule } from '../../components/components.module';

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild(AdminLayoutRoutes),
    FormsModule,
    HttpClientModule,
    NgbModule,
    ClipboardModule,
    ComponentsModule, // Añadido para resolver errores de elementos desconocidos
  ],
  declarations: [DashboardComponent, UserProfileComponent, TablesComponent, IconsComponent, MapsComponent],
})
export class AdminLayoutModule {}


# pages\register\register.component.scss


# layouts\admin-layout\admin-layout.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-admin-layout',
  templateUrl: './admin-layout.component.html',
  styleUrls: ['./admin-layout.component.scss']
})
export class AdminLayoutComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}


# models\user-role.model.ts
import { Role } from './role.model';
import { User } from './user.model';

export class UserRole {
  id?: string;
  startAt?: Date;
  endtAt?: Date;
  users?: User[]; // n users
  roles?: Role[]; // n roles
}


# pages\register\register.component.html
<div class="header bg-gradient-danger py-7 py-lg-8">
  <div class="container">
    <div class="header-body text-center mb-7">
      <div class="row justify-content-center">
        <div class="col-lg-5 col-md-6">
          <h1 class="text-white">Welcome!</h1>
          <p class="text-lead text-light">Use these awesome forms to login or create new account in your project for free.</p>
        </div>
      </div>
    </div>
  </div>
  <div class="separator separator-bottom separator-skew zindex-100">
    <svg x="0" y="0" viewBox="0 0 2560 100" preserveAspectRatio="none" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <polygon class="fill-default" points="2560 0 2560 100 0 100"></polygon>
    </svg>
  </div>
</div>
<!-- Page content -->
<div class="container mt--8 pb-5">
  <!-- Table -->
  <div class="row justify-content-center">
    <div class="col-lg-6 col-md-8">
      <div class="card bg-secondary shadow border-0">
        <div class="card-header bg-transparent pb-5">
          <div class="text-muted text-center mt-2 mb-4"><small>Sign up with</small></div>
          <div class="text-center">
            <a href="javascript:void(0)" class="btn btn-neutral btn-icon mr-4">
              <span class="btn-inner--icon"><img src="assets/img/icons/common/github.svg"></span>
              <span class="btn-inner--text">Github</span>
            </a>
            <a href="javascript:void(0)" class="btn btn-neutral btn-icon">
              <span class="btn-inner--icon"><img src="assets/img/icons/common/google.svg"></span>
              <span class="btn-inner--text">Google</span>
            </a>
          </div>
        </div>
        <div class="card-body px-lg-5 py-lg-5">
          <div class="text-center text-muted mb-4">
            <small>Or sign up with credentials</small>
          </div>
          <form role="form">
            <div class="form-group">
              <div class="input-group input-group-alternative mb-3">
                <div class="input-group-prepend">
                  <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                </div>
                <input class="form-control" placeholder="Name" type="text">
              </div>
            </div>
            <div class="form-group">
              <div class="input-group input-group-alternative mb-3">
                <div class="input-group-prepend">
                  <span class="input-group-text"><i class="ni ni-email-83"></i></span>
                </div>
                <input class="form-control" placeholder="Email" type="email">
              </div>
            </div>
            <div class="form-group">
              <div class="input-group input-group-alternative">
                <div class="input-group-prepend">
                  <span class="input-group-text"><i class="ni ni-lock-circle-open"></i></span>
                </div>
                <input class="form-control" placeholder="Password" type="password">
              </div>
            </div>
            <div class="text-muted font-italic"><small>password strength: <span class="text-success font-weight-700">strong</span></small></div>
            <div class="row my-4">
              <div class="col-12">
                <div class="custom-control custom-control-alternative custom-checkbox">
                  <input class="custom-control-input" id="customCheckRegister" type="checkbox">
                  <label class="custom-control-label" for="customCheckRegister">
                    <span class="text-muted">I agree with the <a href="#!">Privacy Policy</a></span>
                  </label>
                </div>
              </div>
            </div>
            <div class="text-center">
              <button type="button" class="btn btn-primary mt-4">Create account</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>


# layouts\admin-layout\admin-layout.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminLayoutComponent } from './admin-layout.component';

describe('AdminLayoutComponent', () => {
  let component: AdminLayoutComponent;
  let fixture: ComponentFixture<AdminLayoutComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ AdminLayoutComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(AdminLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\user-role.model.spec.ts
import { UserRole } from './user-role.model';

describe('UserRole', () => {
  it('should create an instance', () => {
    expect(new UserRole()).toBeTruthy();
  });
});


# app.component.html
<router-outlet></router-outlet>


# pages\maps\maps.component.ts
import { Component, OnInit } from '@angular/core';
declare const google: any;

@Component({
  selector: 'app-maps',
  templateUrl: './maps.component.html',
  styleUrls: ['./maps.component.scss']
})
export class MapsComponent implements OnInit {

  constructor() { }

  ngOnInit() {
    let map = document.getElementById('map-canvas');
    let lat = map.getAttribute('data-lat');
    let lng = map.getAttribute('data-lng');

    var myLatlng = new google.maps.LatLng(lat, lng);
    var mapOptions = {
        zoom: 12,
        scrollwheel: false,
        center: myLatlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        styles: [
          {"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#444444"}]},
          {"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},
          {"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},
          {"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},
          {"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},
          {"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},
          {"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},
          {"featureType":"water","elementType":"all","stylers":[{"color":'#5e72e4'},{"visibility":"on"}]}]
    }

    map = new google.maps.Map(map, mapOptions);

    var marker = new google.maps.Marker({
        position: myLatlng,
        map: map,
        animation: google.maps.Animation.DROP,
        title: 'Hello World!'
    });

    var contentString = '<div class="info-window-content"><h2>Argon Dashboard</h2>' +
        '<p>A beautiful Dashboard for Bootstrap 4. It is Free and Open Source.</p></div>';

    var infowindow = new google.maps.InfoWindow({
        content: contentString
    });

    google.maps.event.addListener(marker, 'click', function() {
        infowindow.open(map, marker);
    });
  }

}


# app.component.spec.ts
import { TestBed, async } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'argon-dashboard-angular'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app.title).toEqual('argon-dashboard-angular');
  });

  it('should render title in a h1 tag', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.querySelector('h1').textContent).toContain('Welcome to argon-dashboard-angular!');
  });
});


# layouts\admin-layout\admin-layout.component.scss


# models\theater.model.ts
import { Seat } from "./seat.model"

export class Theater {
    id?:number
    location?:string
    capacity?:number
    seats?:Seat[]
}


# pages\maps\maps.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { MapsComponent } from './maps.component';

describe('MapsComponent', () => {
  let component: MapsComponent;
  let fixture: ComponentFixture<MapsComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ MapsComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(MapsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\theater.model.spec.ts
import { Theater } from './theater.model';

describe('Theater', () => {
  it('should create an instance', () => {
    expect(new Theater()).toBeTruthy();
  });
});


# components\sidebar\sidebar.component.ts
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService, GoogleUser } from 'src/app/services/auth.service';
import { SecurityService } from 'src/app/services/security.service'; // Asegúrate de importar SecurityService
import { Observable } from 'rxjs';

declare interface RouteInfo {
  path: string;
  title: string;
  icon: string;
  class: string;
  type: number; // Añadido para controlar la visibilidad según la sesión
}

export const ROUTES: RouteInfo[] = [
  { path: '/dashboard', title: 'Dashboard', icon: 'ni-tv-2 text-primary', class: '', type: 2 },
  { path: '/icons', title: 'Icons', icon: 'ni-planet text-blue', class: '', type: 2 },
  { path: '/maps', title: 'Maps', icon: 'ni-pin-3 text-orange', class: '', type: 2 },
  { path: '/user-profile', title: 'User profile', icon: 'ni-single-02 text-yellow', class: '', type: 2 },
  { path: '/tables', title: 'Tables', icon: 'ni-bullet-list-67 text-red', class: '', type: 2 },
  { path: '/login', title: 'Login', icon: 'ni-key-25 text-info', class: '', type: 0 }, // Solo visible sin sesión
  { path: '/register', title: 'Register', icon: 'ni-circle-08 text-pink', class: '', type: 0 }, // Solo visible sin sesión
  { path: '/theaters', title: 'Theaters', icon: 'ni-building text-green', class: '', type: 1 }, // Solo visible con sesión
];

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.scss'],
})
export class SidebarComponent implements OnInit {
  public menuItems: any[];
  public isCollapsed = true;
  public user$: Observable<GoogleUser | null>; // Observable para los datos del usuario

  constructor(
    private router: Router,
    public authService: AuthService, // Inyectar AuthService
    public securityService: SecurityService // Inyectar SecurityService
  ) {}

  ngOnInit() {
    this.menuItems = ROUTES.filter((menuItem) => menuItem);
    this.router.events.subscribe((event) => {
      this.isCollapsed = true;
    });

    // Suscribirse al observable de usuario del AuthService
    this.user$ = this.authService.user$;
  }

  // Método para cerrar sesión, llamando al servicio de autenticación
  onSignOut(): void {
    this.authService.signOut();
  }
}


# pages\maps\maps.component.scss


# pages\theaters\manage\manage.component.ts
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Theater } from 'src/app/models/theater.model';
import { TheaterService } from 'src/app/services/theater.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-manage',
  templateUrl: './manage.component.html',
  styleUrls: ['./manage.component.scss']
})
export class ManageComponent implements OnInit {
  mode:number // 1: View 2: Create 3: Update
  theater:Theater
  theFormGroup: FormGroup; // Policía de formulario
  trySend:boolean

  constructor(
    private activatedRoute: ActivatedRoute,
    private theatersService:TheaterService,
    private router:Router,
    private theFormBuilder: FormBuilder
  ) {
    this.trySend = false
    this.theater = {id: 0}
    this.configFormGroup()
  }

  ngOnInit(): void {
    const currentUrl = this.activatedRoute.snapshot.url.join('/');
    if (currentUrl.includes('view')) {
      this.mode = 1;
    } else if (currentUrl.includes('create')) {
      this.mode = 2;
    } else if (currentUrl.includes('update')) {
      this.mode = 3;
    }
    if (this.activatedRoute.snapshot.params.id) {
      this.theater.id = this.activatedRoute.snapshot.params.id
      this.getTheater(this.theater.id)
    }

  }

  configFormGroup() {
    this.theFormGroup = this.theFormBuilder.group({
      // primer elemento del vector, valor por defecto
      // lista, serán las reglas
      id: [0, []], // Se valdia en el backend
      capacity: [0, [Validators.required, Validators.min(1), Validators.max(100)]],
      location: ['', [Validators.required, Validators.minLength(2)]]
    })
  }
  
  
  get getTheFormGroup() {
    return this.theFormGroup.controls
  }

  getTheater(id:number){
    // Get data theater by id from backend.
    this.theatersService.view(id).subscribe({
      next: (response) => {
        this.theater = response;
        console.log(response)
        this.theFormGroup.patchValue({
          id: this.theater.id, // Traído del backend
          capacity: this.theater.capacity,
          location: this.theater.location
        });
      },
      error: (error) => {
        console.error('Error fetching theater:', error);
      }
    });
  }

  back(){
    this.router.navigate(['theaters/list'])
  }
  create() {
    this.trySend = true
    if (this.theFormGroup.invalid) {
      Swal.fire({
        title: 'Error!',
        text: 'Por favor, complete todos los campos requeridos.',
        icon: 'error',
      })
      return;
    }
    this.theatersService.create(this.theFormGroup.value).subscribe({
      next: (theater) => {
        console.log('Theater created successfully:', theater);
        Swal.fire({
          title: 'Creado!',
          text: 'Registro creado correctamente.',
          icon: 'success',
        })
        this.router.navigate(['/theaters/list']);
      },
      error: (error) => {
        console.error('Error creating theater:', error);
      }
    });
  }
  update() {
    this.trySend = true
    if (this.theFormGroup.invalid) {
      Swal.fire({
        title: 'Error!',
        text: 'Por favor, complete todos los campos requeridos.',
        icon: 'error',
      })
      return;
    }
    this.theatersService.update(this.theFormGroup.value).subscribe({
      next: (theater) => {
        console.log('Theater updated successfully:', theater);
        Swal.fire({
          title: 'Actualizado!',
          text: 'Registro actualizado correctamente.',
          icon: 'success',
        })
        this.router.navigate(['/theaters/list']);
      },
      error: (error) => {
        console.error('Error updating theater:', error);
      }
    });
  }

}


# models\seat.model.ts
export class Seat {
}


# components\sidebar\sidebar.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { SidebarComponent } from './sidebar.component';

describe('SidebarComponent', () => {
  let component: SidebarComponent;
  let fixture: ComponentFixture<SidebarComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ SidebarComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(SidebarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\maps\maps.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8">
  <div class="container-fluid">
    <div class="header-body">
      <!-- Card stats -->
      <div class="row">
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Traffic</h5>
                  <span class="h2 font-weight-bold mb-0">350,897</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-danger text-white rounded-circle shadow">
                    <i class="fas fa-chart-bar"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fa fa-arrow-up"></i> 3.48%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">New users</h5>
                  <span class="h2 font-weight-bold mb-0">2,356</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-warning text-white rounded-circle shadow">
                    <i class="fas fa-chart-pie"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-danger mr-2"><i class="fas fa-arrow-down"></i> 3.48%</span>
                <span class="text-nowrap">Since last week</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Sales</h5>
                  <span class="h2 font-weight-bold mb-0">924</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-yellow text-white rounded-circle shadow">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-warning mr-2"><i class="fas fa-arrow-down"></i> 1.10%</span>
                <span class="text-nowrap">Since yesterday</span>
              </p>
            </div>
          </div>
        </div>
        <div class="col-xl-3 col-lg-6">
          <div class="card card-stats mb-4 mb-xl-0">
            <div class="card-body">
              <div class="row">
                <div class="col">
                  <h5 class="card-title text-uppercase text-muted mb-0">Performance</h5>
                  <span class="h2 font-weight-bold mb-0">49,65%</span>
                </div>
                <div class="col-auto">
                  <div class="icon icon-shape bg-info text-white rounded-circle shadow">
                    <i class="fas fa-percent"></i>
                  </div>
                </div>
              </div>
              <p class="mt-3 mb-0 text-muted text-sm">
                <span class="text-success mr-2"><i class="fas fa-arrow-up"></i> 12%</span>
                <span class="text-nowrap">Since last month</span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Page content -->
<div class="container-fluid mt--7">
  <div class="row">
    <div class="col">
      <div class="card shadow border-0">
        <div id="map-canvas" class="map-canvas" data-lat="40.748817" data-lng="-73.985428" style="height: 600px;"></div>
      </div>
    </div>
  </div>
</div>


# pages\theaters\manage\manage.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ManageComponent } from './manage.component';

describe('ManageComponent', () => {
  let component: ManageComponent;
  let fixture: ComponentFixture<ManageComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ManageComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ManageComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# models\seat.model.spec.ts
import { Seat } from './seat.model';

describe('Seat', () => {
  it('should create an instance', () => {
    expect(new Seat()).toBeTruthy();
  });
});


# pages\login\login.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { User } from 'src/app/models/user.model';
import { SecurityService } from 'src/app/services/security.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit, OnDestroy {
  user: User
  constructor(private securityService: SecurityService, private router:Router) {
    this.user = { email: "", password: "" }
  }
  login() {
    this.securityService.login(this.user).subscribe({
      next: (data) => {
        this.securityService.saveSession(data)
        this.router.navigate(["dashboard"])
      },
      error: (error) => {
        Swal.fire("Autenticación Inválida", "Usuario o contraseña inválido", "error")
      }
    })
  }

  ngOnInit() {
  }
  ngOnDestroy() {
  }

}


# pages\theaters\manage\manage.component.scss


# models\role.model.ts
export class Role {
  id?: number;
  name?: string;
  description?: string;
}


# pages\login\login.component.spec.ts
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ LoginComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# pages\theaters\manage\manage.component.html
<div class="header bg-gradient-danger pb-8 pt-5 pt-md-8"></div>
<!-- Page content -->
<div class="container-fluid mt--7">
    <!-- Table -->
    <div class="row">
        <div class="col">
            <div class="card shadow">
                <div class="card-header bg-transparent">
                    <h3 class="mb-0" *ngIf="mode == 1">View</h3>
                    <h3 class="mb-0" *ngIf="mode == 2">Create</h3>
                    <h3 class="mb-0" *ngIf="mode == 3">Update</h3>
                </div>
                <div class="card-body">
                    <form class="form" [formGroup]="theFormGroup">
                        <div class="card-body container">
                            <div class="row">
                                <div class="col-3">ID</div>
                                <div class="col-9"><input type="text" class="form-control" formControlName="id" disabled /></div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-3">Ubicación</div>
                                <div class="col-9">
                                    <!-- formControlName: Aplicar la regla de validación -->
                                    <input type="text" class="form-control"  [disabled]="mode == 1" formControlName="location" />
                                    <!-- Mensaje de error/inclunplimiento de la regla -->
                                    <div *ngIf="getTheFormGroup.location.errors && (getTheFormGroup.location.dirty || getTheFormGroup.location.touched || trySend)">
                                        <strong *ngIf="getTheFormGroup.location.errors.required" class="msnError">Requerido</strong>
                                        <strong *ngIf="getTheFormGroup.location.errors.minlength" class="msnError">Inválido </strong>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-3">Capacidad</div>
                                <div class="col-9">
                                  <!-- formControlName="capacity": Aplicar la regla -->
                                    <input type="number" class="form-control" [disabled]="mode == 1" formControlName="capacity" />
                                    <!-- Mensaje de error/inclunplimiento de la regla -->
                                    <div *ngIf="getTheFormGroup.capacity.errors && (getTheFormGroup.capacity.dirty || getTheFormGroup.capacity.touched || trySend)">
                                        <strong *ngIf="getTheFormGroup.capacity.errors.min" class="msnError">Valor mínimo debe ser 1</strong>
                                        <strong *ngIf="getTheFormGroup.capacity.errors.max" class="msnError">Valor máximo 100 </strong>
                                        <strong *ngIf="getTheFormGroup.capacity.errors.required" class="msnError">Requerido</strong>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-3"></div>
                                <div class="col-9">
                                    <button type="button" class="btn btn-primary btn-block" (click)="back()" *ngIf="mode == 1">Regresar</button>
                                    <button type="button" class="btn btn-success btn-block" (click)="create()" *ngIf="mode == 2">Crear</button>
                                    <button type="button" class="btn btn-warning btn-block" (click)="update()" *ngIf="mode == 3">Actualizar</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


# models\role.model.spec.ts
import { Role } from './role.model';

describe('Role', () => {
  it('should create an instance', () => {
    expect(new Role()).toBeTruthy();
  });
});


# pages\login\login.component.scss


# models\role-permission.model.ts
import { Permission } from './permission.model';
import { Role } from './role.model';

export class RolePermission {
  id?: string;
  startAt?: Date;
  endAt?: Date;
  // Esto son relaciones (no se si esten bien...)
  roles?: Role[];
  permissions?: Permission[];
}


# pages\theaters\list\list.component.ts
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Theater } from 'src/app/models/theater.model';
import { TheaterService } from 'src/app/services/theater.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss']
})
export class ListComponent implements OnInit {
  theaters: Theater[] = []
  constructor(private theatersService: TheaterService, private router: Router) { }

  ngOnInit(): void {
    this.list()
  }

  list(){
    this.theatersService.list().subscribe({
      next: (theaters) => {
        this.theaters = theaters;
      }
    });
  }
  create(){
    this.router.navigate(['theaters/create'])
  }
  edit(id: number){
    console.log(`I'm in edit`)
    this.router.navigate([`theaters/update/${id}`])
  }
  view(id:number){
    this.router.navigate([`theaters/view/${id}`])
  }
  delete(id: number){
    console.log("Delete theater with id:", id);
    Swal.fire({
      title: 'Eliminar',
      text: "Está seguro que quiere eliminar el registro?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Si, eliminar',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        this.theatersService.delete(id).
          subscribe(data => {
            Swal.fire(
              'Eliminado!',
              'Registro eliminado correctamente.',
              'success'
            )
            this.ngOnInit();
          });
      }
    })
  }
}


# components\footer\footer.component.scss


# layouts\admin-layout\admin-layout.component.html
<!-- Sidenav -->
<app-sidebar></app-sidebar>
<div class="main-content">
  <!-- Top navbar -->
  <app-navbar></app-navbar>
  <!-- Pages -->
  <router-outlet></router-outlet>
  <div class="container-fluid">
    <app-footer></app-footer>
  </div>
</div>


# components\footer\footer.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent implements OnInit {
  test: Date = new Date();

  constructor() { }

  ngOnInit() {
  }

}


# components\sidebar\sidebar.component.scss


# components\profile\profile.component.ts
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService, GoogleUser } from 'src/app/services/auth.service';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.scss'],
})
export class ProfileComponent implements OnInit {
  // user$ es un observable al que nos suscribiremos en la plantilla con el pipe `async`
  public user$: Observable<GoogleUser | null>;

  constructor(private authService: AuthService, private router: Router) {
    // Asignamos el observable del servicio a nuestra propiedad local
    this.user$ = this.authService.user$;
  }

  ngOnInit(): void {
    // El servicio de autenticación ya se encarga de restaurar la sesión desde localStorage.
    // No es necesario hacerlo aquí.
  }

  /**
   * Llama al método signOut del servicio de autenticación.
   * La redirección ya está manejada dentro del servicio.
   */
  onSignOut(): void {
    this.authService.signOut();
  }
}


# components\profile\profile.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfileComponent } from './profile.component';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ProfileComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


# components\profile\profile.component.scss


# components\profile\profile.component.html
<ng-container *ngIf="user$ | async as user">
  <div class="user-info">
    <img [src]="user.picture" alt="Avatar" width="50" height="50" />
    <p>Hola, {{ user.name }}</p>
    <button (click)="onSignOut()">Cerrar sesión</button>
  </div>
</ng-container>


# components\footer\footer.component.html
<footer class="footer">
  <div class="row align-items-center justify-content-xl-between">
    <div class="col-xl-6">
      <div class="copyright text-center text-xl-left text-muted">
        &copy; {{ test | date: "yyyy" }} <a href="https://www.creative-tim.com?ref=ada-footer-admin-layout" class="font-weight-bold ml-1" target="_blank">Creative Tim</a>
      </div>
    </div>
    <div class="col-xl-6">
      <ul class="nav nav-footer justify-content-center justify-content-xl-end">
        <li class="nav-item">
          <a href="https://www.creative-tim.com?ref=ada-footer-admin-layout" class="nav-link" target="_blank">Creative Tim</a>
        </li>
        <li class="nav-item">
          <a href="https://www.creative-tim.com/presentation?ref=ada-footer-admin-layout" class="nav-link" target="_blank">About Us</a>
        </li>
        <li class="nav-item">
          <a href="http://blog.creative-tim.com?ref=ada-footer-admin-layout" class="nav-link" target="_blank">Blog</a>
        </li>
        <li class="nav-item">
          <a href="https://github.com/creativetimofficial/argon-dashboard-angular/blob/master/LICENSE.md" class="nav-link" target="_blank">MIT License</a>
        </li>
      </ul>
    </div>
  </div>
</footer>


# components\sidebar\sidebar.component.html
<nav class="navbar navbar-vertical navbar-expand-md navbar-light bg-white" id="sidenav-main">
  <div class="container-fluid">
    <!-- Toggler -->
    <button class="navbar-toggler" type="button" (click)="isCollapsed = !isCollapsed" aria-controls="sidenav-collapse-main">
      <span class="navbar-toggler-icon"></span>
    </button>
    <!-- Brand -->
    <a class="navbar-brand pt-0" routerLinkActive="active" [routerLink]="['/dashboard']">
      <img src="./assets/img/brand/red.png" class="navbar-brand-img" alt="..." />
    </a>
    <!-- User -->
    <ul class="nav align-items-center d-md-none">
      <li class="nav-item" ngbDropdown placement="bottom-right">
        <a class="nav-link nav-link-icon" role="button" ngbDropdownToggle>
          <i class="ni ni-bell-55"></i>
        </a>
        <div class="dropdown-menu-arrow dropdown-menu-right" ngbDropdownMenu>
          <a class="dropdown-item" href="javascript:void(0)">Action</a>
          <a class="dropdown-item" href="javascript:void(0)">Another action</a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" href="javascript:void(0)">Something else here</a>
        </div>
      </li>
      <!-- Sección de perfil de usuario para dispositivos móviles -->
      <li *ngIf="user$ | async as user" class="nav-item" ngbDropdown placement="bottom-right">
        <a class="nav-link" role="button" ngbDropdownToggle>
          <div class="media align-items-center">
            <span class="avatar avatar-sm rounded-circle">
              <!-- Usar la imagen del usuario del localStorage -->
              <img [alt]="user.name" [src]="user.picture" onerror="this.onerror=null; this.src='https://placehold.co/96x96/cccccc/333333?text=' + (this.alt ? this.alt.charAt(0).toUpperCase() : 'U');" />
            </span>
          </div>
        </a>
        <div class="dropdown-menu-arrow dropdown-menu-right" ngbDropdownMenu>
          <div class="dropdown-header noti-title">
            <h6 class="text-overflow m-0">Welcome!</h6>
          </div>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-single-02"></i>
            <span>My profile</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-settings-gear-65"></i>
            <span>Settings</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-calendar-grid-58"></i>
            <span>Activity</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-support-16"></i>
            <span>Support</span>
          </a>
          <div class="dropdown-divider"></div>
          <a (click)="onSignOut()" class="dropdown-item">
            <i class="ni ni-user-run"></i>
            <span>Logout</span>
          </a>
        </div>
      </li>
      <!-- Opción de Login para dispositivos móviles si no hay sesión -->
      <li *ngIf="!(user$ | async)" class="nav-item">
        <a [routerLink]="['/login']" class="nav-link"> <i class="ni ni-key-25 text-info"></i> Login </a>
      </li>
    </ul>
    <!-- Collapse -->
    <div class="collapse navbar-collapse" [ngbCollapse]="isCollapsed" id="sidenav-collapse-main">
      <!-- Collapse header -->
      <div class="navbar-collapse-header d-md-none">
        <div class="row">
          <div class="col-6 collapse-brand">
            <a routerLinkActive="active" [routerLink]="['/dashboard']">
              <img src="./assets/img/brand/blue.png" />
            </a>
          </div>
          <div class="col-6 collapse-close">
            <button type="button" class="navbar-toggler" (click)="isCollapsed = !isCollapsed">
              <span></span>
              <span></span>
            </button>
          </div>
        </div>
      </div>
      <!-- Form -->
      <form class="mt-4 mb-3 d-md-none">
        <div class="input-group input-group-rounded input-group-merge">
          <input type="search" class="form-control form-control-rounded form-control-prepended" placeholder="Search" aria-label="Search" />
          <div class="input-group-prepend">
            <div class="input-group-text">
              <span class="fa fa-search"></span>
            </div>
          </div>
        </div>
      </form>
      <!-- Navigation -->
      <ul class="navbar-nav">
        <li *ngFor="let menuItem of menuItems" class="{{ menuItem.class }} nav-item">
          <!-- Mostrar elementos de menú según el tipo de sesión -->
          <ng-container *ngIf="(securityService.existSession() && menuItem.type === 1) || (!securityService.existSession() && menuItem.type === 0) || menuItem.type === 2">
            <a routerLinkActive="active" [routerLink]="[menuItem.path]" class="nav-link"> <i class="ni {{ menuItem.icon }}"></i> {{ menuItem.title }} </a>
          </ng-container>
        </li>
      </ul>
      <!-- Divider -->
      <hr class="my-3" />
      <!-- Heading -->
      <h6 class="navbar-heading text-muted">Documentation</h6>
      <!-- Navigation -->
      <ul class="navbar-nav mb-md-3">
        <li class="nav-item">
          <a class="nav-link" href="https://demos.creative-tim.com/argon-dashboard-angular/documentation/tutorial?ref=ada-sidebar" target="_blank"> <i class="ni ni-spaceship"></i> Getting started </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="https://demos.creative-tim.com/argon-dashboard-angular/documentation/colors?ref=ada-sidebar" target="_blank"> <i class="ni ni-palette"></i> Foundation </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="https://demos.creative-tim.com/argon-dashboard-angular/documentation/alerts?ref=ada-sidebar" target="_blank"> <i class="ni ni-ui-04"></i> Components </a>
        </li>
      </ul>
    </div>
  </div>
</nav>


# components\navbar\navbar.component.scss


# components\login-button\login-button.component.html
<!-- Contenedor para el botón de inicio de sesión de Google -->
<!-- Google Identity Services renderizará el botón dentro de este div -->
<div id="google-signin-button"></div>


# components\navbar\navbar.component.html
<nav class="navbar navbar-top navbar-expand-md navbar-dark" id="navbar-main">
  <div class="container-fluid">
    <!-- Brand -->
    <a class="h4 mb-0 text-white text-uppercase d-none d-lg-inline-block" routerLinkActive="active" [routerLink]="['/dashboard']">{{ getTitle() }}</a>
    <!-- Form -->
    <form class="navbar-search navbar-search-dark form-inline mr-3 d-none d-md-flex ml-lg-auto">
      <div class="form-group mb-0" [ngClass]="{ focused: focus === true }">
        <div class="input-group input-group-alternative">
          <div class="input-group-prepend">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
          </div>
          <input class="form-control" placeholder="Search" type="text" (focus)="focus = true" (blur)="focus = false" />
        </div>
      </div>
    </form>
    <!-- User / Login Button -->
    <ul class="navbar-nav align-items-center d-none d-md-flex">
      <!-- Muestra la imagen del usuario y el dropdown si hay un usuario logueado -->
      <li *ngIf="user$ | async as user" class="nav-item" ngbDropdown placement="bottom-right">
        <a class="nav-link pr-0" role="button" ngbDropdownToggle>
          <div class="media align-items-center">
            <span class="avatar avatar-sm rounded-circle">
              <!-- Usar la imagen del usuario obtenida del Observable -->
              <!-- Corregido el onerror para asegurar que la primera letra se use correctamente -->
              <img [alt]="user.name" [src]="user.picture" onerror="this.onerror=null; this.src='https://placehold.co/96x96/cccccc/333333?text=' + (this.alt ? this.alt.charAt(0).toUpperCase() : 'U');" />
            </span>
            <div class="media-body ml-2 d-none d-lg-block">
              <!-- Mostrar el nombre del usuario -->
              <span class="mb-0 text-sm font-weight-bold">{{ user.name }}</span>
            </div>
          </div>
        </a>
        <div class="dropdown-menu-arrow dropdown-menu-right" ngbDropdownMenu>
          <div class="dropdown-header noti-title">
            <h6 class="text-overflow m-0">Welcome!</h6>
          </div>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-single-02"></i>
            <span>My profile</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-settings-gear-65"></i>
            <span>Settings</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-calendar-grid-58"></i>
            <span>Activity</span>
          </a>
          <a routerLinkActive="active" [routerLink]="['/user-profile']" class="dropdown-item">
            <i class="ni ni-support-16"></i>
            <span>Support</span>
          </a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" (click)="logout()">
            <i class="ni ni-user-run"></i>
            <span>Logout</span>
          </a>
        </div>
      </li>
      <!-- Muestra el botón de Login si no hay un usuario logueado -->
      <li *ngIf="!(user$ | async)" class="nav-item">
        <a class="nav-link" routerLink="/login"> <i class="ni ni-key-25 text-white"></i> Login </a>
      </li>
    </ul>
  </div>
</nav>


